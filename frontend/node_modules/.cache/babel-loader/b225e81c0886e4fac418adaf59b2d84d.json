{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { gridColumnVisibilityModelSelector, GridEvents } from '@mui/x-data-grid-pro';\n\nconst updateColumnVisibilityModel = (columnVisibilityModel, rowGroupingModel, prevRowGroupingModel) => {\n  const newColumnVisibilityModel = _extends({}, columnVisibilityModel);\n\n  rowGroupingModel == null ? void 0 : rowGroupingModel.forEach(field => {\n    if (!(prevRowGroupingModel != null && prevRowGroupingModel.includes(field))) {\n      newColumnVisibilityModel[field] = false;\n    }\n  });\n  prevRowGroupingModel == null ? void 0 : prevRowGroupingModel.forEach(field => {\n    if (!(rowGroupingModel != null && rowGroupingModel.includes(field))) {\n      newColumnVisibilityModel[field] = true;\n    }\n  });\n  return newColumnVisibilityModel;\n};\n/**\n * Automatically hide columns when added to the row grouping model and stop hiding them when they are removed.\n * Handles both the `props.initialState.rowGrouping.model` and `props.rowGroupingModel`\n * Does not work when used with the `hide` property of `GridColDef`\n */\n\n\nexport const useKeepGroupedColumnsHidden = props => {\n  var _props$rowGroupingMod, _props$initialState, _props$initialState$r;\n\n  const initialProps = React.useRef(props);\n  const rowGroupingModel = React.useRef((_props$rowGroupingMod = props.rowGroupingModel) != null ? _props$rowGroupingMod : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$r = _props$initialState.rowGrouping) == null ? void 0 : _props$initialState$r.model);\n  React.useEffect(() => {\n    props.apiRef.current.subscribeEvent(GridEvents.rowGroupingModelChange, newModel => {\n      const columnVisibilityModel = updateColumnVisibilityModel(gridColumnVisibilityModelSelector(props.apiRef), newModel, rowGroupingModel.current);\n      props.apiRef.current.setColumnVisibilityModel(columnVisibilityModel);\n      rowGroupingModel.current = newModel;\n    });\n  }, [props.apiRef]);\n  return React.useMemo(() => {\n    var _invariantInitialStat;\n\n    const invariantInitialState = initialProps.current.initialState;\n    const columnVisibilityModel = updateColumnVisibilityModel(invariantInitialState == null ? void 0 : (_invariantInitialStat = invariantInitialState.columns) == null ? void 0 : _invariantInitialStat.columnVisibilityModel, rowGroupingModel.current, undefined);\n    return _extends({}, invariantInitialState, {\n      columns: _extends({}, invariantInitialState == null ? void 0 : invariantInitialState.columns, {\n        columnVisibilityModel\n      })\n    });\n  }, []);\n};","map":null,"metadata":{},"sourceType":"module"}