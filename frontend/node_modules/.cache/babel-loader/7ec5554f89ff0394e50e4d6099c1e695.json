{"ast":null,"code":"import * as React from 'react';\nimport clsx from 'clsx';\nimport { alpha, styled } from '@mui/material/styles';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Value = styled('div')(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    width: '100%',\n    height: '100%',\n    lineHeight: '100%',\n    paddingRight: 8,\n    fontVariantNumeric: 'tabular-nums',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    '&.good': {\n      backgroundColor: alpha(theme.palette.success.main, 0.3)\n    },\n    '&.bad': {\n      backgroundColor: alpha(theme.palette.error.main, 0.3)\n    }\n  };\n});\nconst currencyFormatter = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD'\n});\nconst TotalPrice = /*#__PURE__*/React.memo(function TotalPrice(props) {\n  const {\n    value\n  } = props;\n  return /*#__PURE__*/_jsx(Value, {\n    className: clsx(value > 1000000 && \"good\", value < 1000000 && \"bad\"),\n    children: currencyFormatter.format(value)\n  });\n});\nexport function renderTotalPrice(params) {\n  if (params.value == null) {\n    return '';\n  } // If the aggregated value does not have the same unit as the other cell\n  // Then we fall back to the default rendering based on `valueGetter` instead of rendering the total price UI.\n\n\n  if (params.aggregation && !params.aggregation.hasCellUnit) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsx(TotalPrice, {\n    value: params.value\n  });\n}","map":null,"metadata":{},"sourceType":"module"}