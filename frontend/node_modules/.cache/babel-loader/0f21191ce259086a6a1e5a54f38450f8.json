{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { getDataGridUtilityClass } from '@mui/x-data-grid';\nimport { useGridRegisterPipeProcessor } from '@mui/x-data-grid/internals';\nimport { GRID_REORDER_COL_DEF } from './gridRowReorderColDef';\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  return React.useMemo(() => {\n    const slots = {\n      rowReorderCellContainer: ['rowReorderCellContainer'],\n      columnHeaderReorder: ['columnHeaderReorder']\n    };\n    return composeClasses(slots, getDataGridUtilityClass, classes);\n  }, [classes]);\n};\n\nexport const useGridRowReorderPreProcessors = (apiRef, props) => {\n  const ownerState = {\n    classes: props.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const updateReorderColumn = React.useCallback(columnsState => {\n    const reorderColumn = _extends({}, GRID_REORDER_COL_DEF, {\n      cellClassName: classes.rowReorderCellContainer,\n      headerClassName: classes.columnHeaderReorder,\n      headerName: apiRef.current.getLocaleText('rowReorderingHeaderName')\n    });\n\n    const shouldHaveReorderColumn = props.rowReordering;\n    const haveReorderColumn = columnsState.lookup[reorderColumn.field] != null;\n\n    if (shouldHaveReorderColumn && haveReorderColumn) {\n      return columnsState;\n    }\n\n    if (shouldHaveReorderColumn && !haveReorderColumn) {\n      columnsState.lookup[reorderColumn.field] = reorderColumn;\n      columnsState.all = [reorderColumn.field, ...columnsState.all];\n    } else if (!shouldHaveReorderColumn && haveReorderColumn) {\n      delete columnsState.lookup[reorderColumn.field];\n      columnsState.all = columnsState.all.filter(field => field !== reorderColumn.field);\n    }\n\n    return columnsState;\n  }, [apiRef, classes, props.rowReordering]);\n  useGridRegisterPipeProcessor(apiRef, 'hydrateColumns', updateReorderColumn);\n};","map":null,"metadata":{},"sourceType":"module"}