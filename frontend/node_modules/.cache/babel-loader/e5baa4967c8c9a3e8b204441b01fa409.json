{"ast":null,"code":"import * as React from 'react';\nimport { useGridApiMethod, useGridLogger } from '@mui/x-data-grid';\nimport { useGridRegisterPipeProcessor, exportAs, getColumnsToExport, defaultGetRowsToExport } from '@mui/x-data-grid/internals';\nimport { buildExcel } from './serializer/excelSerializer';\nimport { GridExcelExportMenuItem } from '../../../components';\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridSelection (state)\n * @requires useGridParamsApi (method)\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const useGridExcelExport = apiRef => {\n  const logger = useGridLogger(apiRef, 'useGridExcelExport');\n  const getDataAsExcel = React.useCallback(function () {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var _options$getRowsToExp, _options$includeHeade, _options$includeColum;\n\n    logger.debug(`Get data as excel`);\n    const getRowsToExport = (_options$getRowsToExp = options.getRowsToExport) != null ? _options$getRowsToExp : defaultGetRowsToExport;\n    const exportedRowIds = getRowsToExport({\n      apiRef\n    });\n    const exportedColumns = getColumnsToExport({\n      apiRef,\n      options\n    });\n    return buildExcel({\n      columns: exportedColumns,\n      rowIds: exportedRowIds,\n      includeHeaders: (_options$includeHeade = options.includeHeaders) != null ? _options$includeHeade : true,\n      includeColumnGroupsHeaders: (_options$includeColum = options.includeColumnGroupsHeaders) != null ? _options$includeColum : true,\n      valueOptionsSheetName: (options == null ? void 0 : options.valueOptionsSheetName) || 'Options',\n      columnsStyles: options == null ? void 0 : options.columnsStyles,\n      exceljsPreProcess: options == null ? void 0 : options.exceljsPreProcess,\n      exceljsPostProcess: options == null ? void 0 : options.exceljsPostProcess\n    }, apiRef.current);\n  }, [logger, apiRef]);\n  const exportDataAsExcel = React.useCallback(async options => {\n    logger.debug(`Export data as excel`);\n    const workbook = await getDataAsExcel(options);\n\n    if (workbook === null) {\n      return;\n    }\n\n    const content = await workbook.xlsx.writeBuffer();\n    const blob = new Blob([content], {\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    });\n    exportAs(blob, 'xlsx', options == null ? void 0 : options.fileName);\n  }, [logger, getDataAsExcel]);\n  const excelExportApi = {\n    getDataAsExcel,\n    exportDataAsExcel\n  };\n  useGridApiMethod(apiRef, excelExportApi, 'GridExcelExportApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    var _options$excelOptions;\n\n    if ((_options$excelOptions = options.excelOptions) != null && _options$excelOptions.disableToolbarButton) {\n      return initialValue;\n    }\n\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridExcelExportMenuItem, {\n        options: options.excelOptions\n      }),\n      componentName: 'excelExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n};","map":null,"metadata":{},"sourceType":"module"}