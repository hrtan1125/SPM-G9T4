{"ast":null,"code":"import { gridStringOrNumberComparator } from '@mui/x-data-grid-premium';\nimport { randomCommodity, randomDesk, randomEmail, randomFeeRate, generateFilledQuantity, randomId, randomIncoterm, generateIsFilled, randomQuantity, randomTraderName, randomUnitPrice, randomUnitPriceCurrency, randomStatusOptions, randomPnL, randomTradeDate, randomMaturityDate, randomBrokerId, randomCompanyName, randomCountry, randomCurrency, randomAddress, randomCity, randomUpdatedDate, randomCreatedDate, randomRateType, randomContractType, randomTaxCode } from '../services';\nimport { renderCountry, renderEmail, renderIncoterm, renderPnl, renderProgress, renderStatus, renderTotalPrice, renderEditCurrency, renderEditProgress, renderEditStatus, renderEditIncoterm } from '../renderer';\nimport { CONTRACT_TYPE_OPTIONS, COUNTRY_ISO_OPTIONS_SORTED, CURRENCY_OPTIONS, INCOTERM_OPTIONS, RATE_TYPE_OPTIONS, STATUS_OPTIONS, TAXCODE_OPTIONS } from '../services/static-data';\nexport const getCommodityColumns = function () {\n  let editable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  return [{\n    field: 'id',\n    generateData: randomId,\n    hide: true\n  }, {\n    field: 'desk',\n    headerName: 'Desk',\n    generateData: randomDesk,\n    width: 110\n  }, {\n    field: 'commodity',\n    headerName: 'Commodity',\n    generateData: randomCommodity,\n    width: 180,\n    editable\n  }, {\n    field: 'traderName',\n    headerName: 'Trader Name',\n    generateData: randomTraderName,\n    width: 120,\n    editable\n  }, {\n    field: 'traderEmail',\n    headerName: 'Trader Email',\n    generateData: randomEmail,\n    renderCell: renderEmail,\n    width: 150,\n    editable\n  }, {\n    field: 'quantity',\n    headerName: 'Quantity',\n    type: 'number',\n    width: 140,\n    generateData: randomQuantity,\n    editable,\n    valueParser: value => Number(value)\n  }, {\n    field: 'filledQuantity',\n    headerName: 'Filled Quantity',\n    generateData: generateFilledQuantity,\n    renderCell: renderProgress,\n    renderEditCell: renderEditProgress,\n    availableAggregationFunctions: ['min', 'max', 'avg', 'size'],\n    type: 'number',\n    width: 120,\n    editable\n  }, {\n    field: 'isFilled',\n    headerName: 'Is Filled',\n    align: 'center',\n    generateData: generateIsFilled,\n    type: 'boolean',\n    width: 80,\n    editable\n  }, {\n    field: 'status',\n    headerName: 'Status',\n    generateData: randomStatusOptions,\n    renderCell: renderStatus,\n    renderEditCell: renderEditStatus,\n    type: 'singleSelect',\n    valueOptions: STATUS_OPTIONS,\n    width: 150,\n    editable\n  }, {\n    field: 'unitPrice',\n    headerName: 'Unit Price',\n    generateData: randomUnitPrice,\n    type: 'number',\n    editable,\n    valueParser: value => Number(value)\n  }, {\n    field: 'unitPriceCurrency',\n    headerName: 'Unit Price Currency',\n    generateData: randomUnitPriceCurrency,\n    renderEditCell: renderEditCurrency,\n    type: 'singleSelect',\n    valueOptions: CURRENCY_OPTIONS,\n    width: 120,\n    editable\n  }, {\n    field: 'subTotal',\n    headerName: 'Sub Total',\n    valueGetter: _ref => {\n      let {\n        row,\n        rowNode\n      } = _ref;\n      return rowNode.isAutoGenerated ? null : row.quantity * row.unitPrice;\n    },\n    type: 'number',\n    width: 120\n  }, {\n    field: 'feeRate',\n    headerName: 'Fee Rate',\n    generateData: randomFeeRate,\n    type: 'number',\n    width: 80,\n    editable,\n    valueParser: value => Number(value)\n  }, {\n    field: 'feeAmount',\n    headerName: 'Fee Amount',\n    valueGetter: _ref2 => {\n      let {\n        row,\n        rowNode\n      } = _ref2;\n      return rowNode.isAutoGenerated ? null : row.feeRate * row.quantity * row.unitPrice;\n    },\n    type: 'number',\n    width: 120\n  }, {\n    field: 'incoTerm',\n    generateData: randomIncoterm,\n    renderCell: renderIncoterm,\n    renderEditCell: renderEditIncoterm,\n    type: 'singleSelect',\n    valueOptions: INCOTERM_OPTIONS,\n    editable\n  }, {\n    field: 'totalPrice',\n    headerName: 'Total in USD',\n    valueGetter: _ref3 => {\n      let {\n        row,\n        rowNode\n      } = _ref3;\n      return rowNode.isAutoGenerated ? null : row.feeRate + row.quantity * row.unitPrice;\n    },\n    renderCell: renderTotalPrice,\n    type: 'number',\n    width: 160\n  }, {\n    field: 'pnl',\n    headerName: 'PnL',\n    generateData: randomPnL,\n    renderCell: renderPnl,\n    type: 'number',\n    width: 140\n  }, {\n    field: 'maturityDate',\n    headerName: 'Maturity Date',\n    generateData: randomMaturityDate,\n    type: 'date',\n    editable\n  }, {\n    field: 'tradeDate',\n    headerName: 'Trade Date',\n    generateData: randomTradeDate,\n    type: 'date',\n    editable\n  }, {\n    field: 'brokerId',\n    headerName: 'Broker Id',\n    generateData: randomBrokerId,\n    hide: true,\n    editable\n  }, {\n    field: 'brokerName',\n    headerName: 'Broker Name',\n    generateData: randomCompanyName,\n    width: 140,\n    editable\n  }, {\n    field: 'counterPartyName',\n    headerName: 'Counterparty',\n    generateData: randomCompanyName,\n    width: 180,\n    editable\n  }, {\n    field: 'counterPartyCountry',\n    headerName: 'Counterparty Country',\n    type: 'singleSelect',\n    generateData: randomCountry,\n    renderCell: renderCountry,\n    valueOptions: COUNTRY_ISO_OPTIONS_SORTED,\n    valueParser: value => {\n      if (typeof value === 'string') {\n        return COUNTRY_ISO_OPTIONS_SORTED.find(country => country.value === value);\n      }\n\n      return value;\n    },\n    valueFormatter: _ref4 => {\n      let {\n        value\n      } = _ref4;\n      return value == null ? void 0 : value.label;\n    },\n    groupingValueGetter: params => params.value.code,\n    sortComparator: (v1, v2, param1, param2) => gridStringOrNumberComparator(v1.label, v2.label, param1, param2),\n    editable,\n    width: 120\n  }, {\n    field: 'counterPartyCurrency',\n    headerName: 'Counterparty Currency',\n    generateData: randomCurrency,\n    renderEditCell: renderEditCurrency,\n    type: 'singleSelect',\n    valueOptions: CURRENCY_OPTIONS,\n    editable\n  }, {\n    field: 'counterPartyAddress',\n    headerName: 'Counterparty Address',\n    generateData: randomAddress,\n    width: 200,\n    editable\n  }, {\n    field: 'counterPartyCity',\n    headerName: 'Counterparty City',\n    generateData: randomCity,\n    width: 120,\n    editable\n  }, {\n    field: 'taxCode',\n    headerName: 'Tax Code',\n    generateData: randomTaxCode,\n    type: 'singleSelect',\n    valueOptions: TAXCODE_OPTIONS,\n    editable\n  }, {\n    field: 'contractType',\n    headerName: 'Contract Type',\n    generateData: randomContractType,\n    type: 'singleSelect',\n    valueOptions: CONTRACT_TYPE_OPTIONS,\n    editable\n  }, {\n    field: 'rateType',\n    headerName: 'Rate Type',\n    generateData: randomRateType,\n    type: 'singleSelect',\n    valueOptions: RATE_TYPE_OPTIONS,\n    editable\n  }, {\n    field: 'lastUpdated',\n    headerName: 'Updated on',\n    generateData: randomUpdatedDate,\n    type: 'dateTime',\n    width: 180,\n    editable\n  }, {\n    field: 'dateCreated',\n    headerName: 'Created on',\n    generateData: randomCreatedDate,\n    type: 'date',\n    width: 150,\n    editable\n  }];\n};","map":null,"metadata":{},"sourceType":"module"}