{"ast":null,"code":"import { GridFilterInputValue } from '../components/panel/filterPanel/GridFilterInputValue';\nimport { escapeRegExp } from '../utils/utils';\nimport { GridFilterInputMultipleValue } from '../components/panel/filterPanel/GridFilterInputMultipleValue';\nexport const getGridStringQuickFilterFn = value => {\n  if (!value) {\n    return null;\n  }\n\n  const filterRegex = new RegExp(escapeRegExp(value), 'i');\n  return _ref => {\n    let {\n      value: columnValue\n    } = _ref;\n    return columnValue != null ? filterRegex.test(columnValue.toString()) : false;\n  };\n};\nexport const getGridStringOperators = function () {\n  let disableTrim = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  return [{\n    value: 'contains',\n    getApplyFilterFn: filterItem => {\n      if (!filterItem.value) {\n        return null;\n      }\n\n      const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();\n      const filterRegex = new RegExp(escapeRegExp(filterItemValue), 'i');\n      return _ref2 => {\n        let {\n          value\n        } = _ref2;\n        return value != null ? filterRegex.test(value.toString()) : false;\n      };\n    },\n    InputComponent: GridFilterInputValue\n  }, {\n    value: 'equals',\n    getApplyFilterFn: filterItem => {\n      if (!filterItem.value) {\n        return null;\n      }\n\n      const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();\n      const collator = new Intl.Collator(undefined, {\n        sensitivity: 'base',\n        usage: 'search'\n      });\n      return _ref3 => {\n        let {\n          value\n        } = _ref3;\n        return value != null ? collator.compare(filterItemValue, value.toString()) === 0 : false;\n      };\n    },\n    InputComponent: GridFilterInputValue\n  }, {\n    value: 'startsWith',\n    getApplyFilterFn: filterItem => {\n      if (!filterItem.value) {\n        return null;\n      }\n\n      const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();\n      const filterRegex = new RegExp(`^${escapeRegExp(filterItemValue)}.*$`, 'i');\n      return _ref4 => {\n        let {\n          value\n        } = _ref4;\n        return value != null ? filterRegex.test(value.toString()) : false;\n      };\n    },\n    InputComponent: GridFilterInputValue\n  }, {\n    value: 'endsWith',\n    getApplyFilterFn: filterItem => {\n      if (!filterItem.value) {\n        return null;\n      }\n\n      const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();\n      const filterRegex = new RegExp(`.*${escapeRegExp(filterItemValue)}$`, 'i');\n      return _ref5 => {\n        let {\n          value\n        } = _ref5;\n        return value != null ? filterRegex.test(value.toString()) : false;\n      };\n    },\n    InputComponent: GridFilterInputValue\n  }, {\n    value: 'isEmpty',\n    getApplyFilterFn: () => {\n      return _ref6 => {\n        let {\n          value\n        } = _ref6;\n        return value === '' || value == null;\n      };\n    },\n    requiresFilterValue: false\n  }, {\n    value: 'isNotEmpty',\n    getApplyFilterFn: () => {\n      return _ref7 => {\n        let {\n          value\n        } = _ref7;\n        return value !== '' && value != null;\n      };\n    },\n    requiresFilterValue: false\n  }, {\n    value: 'isAnyOf',\n    getApplyFilterFn: filterItem => {\n      if (!Array.isArray(filterItem.value) || filterItem.value.length === 0) {\n        return null;\n      }\n\n      const filterItemValue = disableTrim ? filterItem.value : filterItem.value.map(val => val.trim());\n      const collator = new Intl.Collator(undefined, {\n        sensitivity: 'base',\n        usage: 'search'\n      });\n      return _ref8 => {\n        let {\n          value\n        } = _ref8;\n        return value != null ? filterItemValue.some(filterValue => {\n          return collator.compare(filterValue, value.toString() || '') === 0;\n        }) : false;\n      };\n    },\n    InputComponent: GridFilterInputMultipleValue\n  }];\n};","map":null,"metadata":{},"sourceType":"module"}