{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport MuiDivider from '@mui/material/Divider';\nimport { useGridSelector, gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector, gridVisibleColumnFieldsSelector, gridClasses, useGridApiMethod, useGridApiEventHandler, gridColumnFieldsSelector } from '@mui/x-data-grid';\nimport { useGridRegisterPipeProcessor } from '@mui/x-data-grid/internals';\nimport { GridColumnPinningMenuItems } from '../../../components/GridColumnPinningMenuItems';\nimport { GridPinnedPosition } from './gridColumnPinningInterface';\nimport { gridPinnedColumnsSelector } from './gridColumnPinningSelector';\nimport { filterColumns } from '../../../components/DataGridProVirtualScroller';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst Divider = () => /*#__PURE__*/_jsx(MuiDivider, {\n  onClick: event => event.stopPropagation()\n});\n\nexport const columnPinningStateInitializer = (state, props, apiRef) => {\n  var _props$initialState;\n\n  apiRef.current.unstable_caches.columnPinning = {\n    orderedFieldsBeforePinningColumns: null\n  };\n  let model;\n\n  if (props.disableColumnPinning) {\n    model = {};\n  } else if (props.pinnedColumns) {\n    model = props.pinnedColumns;\n  } else if ((_props$initialState = props.initialState) != null && _props$initialState.pinnedColumns) {\n    var _props$initialState2;\n\n    model = (_props$initialState2 = props.initialState) == null ? void 0 : _props$initialState2.pinnedColumns;\n  } else {\n    model = {};\n  }\n\n  return _extends({}, state, {\n    pinnedColumns: model\n  });\n};\n\nconst mergeStateWithPinnedColumns = pinnedColumns => state => _extends({}, state, {\n  pinnedColumns\n});\n\nexport const useGridColumnPinning = (apiRef, props) => {\n  var _props$initialState4;\n\n  const pinnedColumns = useGridSelector(apiRef, gridPinnedColumnsSelector); // Each visible row (not to be confused with a filter result) is composed of a central .MuiDataGrid-row element\n  // and up to two additional .MuiDataGrid-row's, one for the columns pinned to the left and another\n  // for those on the right side. When hovering any of these elements, the :hover styles are applied only to\n  // the row element that was actually hovered, not its additional siblings. To make it look like a contiguous row,\n  // this method adds/removes the .Mui-hovered class to all of the row elements inside one visible row.\n\n  const updateHoveredClassOnSiblingRows = React.useCallback(event => {\n    var _pinnedColumns$left$l, _pinnedColumns$left, _pinnedColumns$right$, _pinnedColumns$right;\n\n    if (props.disableColumnPinning) {\n      return;\n    }\n\n    if (!Array.isArray(pinnedColumns.left) && !Array.isArray(pinnedColumns.right)) {\n      return;\n    }\n\n    const nbLeftPinnedColumns = (_pinnedColumns$left$l = (_pinnedColumns$left = pinnedColumns.left) == null ? void 0 : _pinnedColumns$left.length) != null ? _pinnedColumns$left$l : 0;\n    const nbRightPinnedColumns = (_pinnedColumns$right$ = (_pinnedColumns$right = pinnedColumns.right) == null ? void 0 : _pinnedColumns$right.length) != null ? _pinnedColumns$right$ : 0;\n\n    if (nbLeftPinnedColumns + nbRightPinnedColumns === 0) {\n      return;\n    }\n\n    const index = event.currentTarget.dataset.rowindex;\n    const rowElements = apiRef.current.windowRef.current.querySelectorAll(`.${gridClasses.row}[data-rowindex=\"${index}\"]`);\n    rowElements.forEach(row => {\n      // Ignore rows from other grid inside the hovered row\n      if (row.closest(`.${gridClasses.virtualScroller}`) === apiRef.current.windowRef.current) {\n        if (event.type === 'mouseenter') {\n          row.classList.add('Mui-hovered');\n        } else {\n          row.classList.remove('Mui-hovered');\n        }\n      }\n    });\n  }, [apiRef, pinnedColumns.left, pinnedColumns.right, props.disableColumnPinning]);\n  const handleMouseEnter = React.useCallback((params, event) => {\n    updateHoveredClassOnSiblingRows(event);\n  }, [updateHoveredClassOnSiblingRows]);\n  const handleMouseLeave = React.useCallback((params, event) => {\n    updateHoveredClassOnSiblingRows(event);\n  }, [updateHoveredClassOnSiblingRows]);\n  useGridApiEventHandler(apiRef, 'rowMouseEnter', handleMouseEnter);\n  useGridApiEventHandler(apiRef, 'rowMouseLeave', handleMouseLeave);\n  /**\n   * PRE-PROCESSING\n   */\n\n  const calculateScrollLeft = React.useCallback((initialValue, params) => {\n    if (props.disableColumnPinning) {\n      return initialValue;\n    }\n\n    const visibleColumnFields = gridVisibleColumnFieldsSelector(apiRef);\n    const [leftPinnedColumns, rightPinnedColumns] = filterColumns(pinnedColumns, visibleColumnFields);\n\n    if (!params.colIndex || leftPinnedColumns.length === 0 && rightPinnedColumns.length === 0) {\n      return initialValue;\n    }\n\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n    const columnsTotalWidth = gridColumnsTotalWidthSelector(apiRef);\n    const columnPositions = gridColumnPositionsSelector(apiRef);\n    const clientWidth = apiRef.current.windowRef.current.clientWidth;\n    const scrollLeft = apiRef.current.windowRef.current.scrollLeft;\n    const offsetWidth = visibleColumns[params.colIndex].computedWidth;\n    const offsetLeft = columnPositions[params.colIndex];\n    const leftPinnedColumnsWidth = columnPositions[leftPinnedColumns.length];\n    const rightPinnedColumnsWidth = columnsTotalWidth - columnPositions[columnPositions.length - rightPinnedColumns.length];\n    const elementBottom = offsetLeft + offsetWidth;\n\n    if (elementBottom - (clientWidth - rightPinnedColumnsWidth) > scrollLeft) {\n      const left = elementBottom - (clientWidth - rightPinnedColumnsWidth);\n      return _extends({}, initialValue, {\n        left\n      });\n    }\n\n    if (offsetLeft < scrollLeft + leftPinnedColumnsWidth) {\n      const left = offsetLeft - leftPinnedColumnsWidth;\n      return _extends({}, initialValue, {\n        left\n      });\n    }\n\n    return initialValue;\n  }, [apiRef, pinnedColumns, props.disableColumnPinning]);\n  const addColumnMenuButtons = React.useCallback((initialValue, column) => {\n    if (props.disableColumnPinning) {\n      return initialValue;\n    }\n\n    if (column.pinnable === false) {\n      return initialValue;\n    }\n\n    return [...initialValue, /*#__PURE__*/_jsx(Divider, {}), /*#__PURE__*/_jsx(GridColumnPinningMenuItems, {})];\n  }, [props.disableColumnPinning]);\n  const checkIfCanBeReordered = React.useCallback((initialValue, _ref) => {\n    let {\n      targetIndex\n    } = _ref;\n    const visibleColumnFields = gridVisibleColumnFieldsSelector(apiRef);\n    const [leftPinnedColumns, rightPinnedColumns] = filterColumns(pinnedColumns, visibleColumnFields);\n\n    if (leftPinnedColumns.length === 0 && rightPinnedColumns.length === 0) {\n      return initialValue;\n    }\n\n    if (leftPinnedColumns.length > 0 && targetIndex < leftPinnedColumns.length) {\n      return false;\n    }\n\n    if (rightPinnedColumns.length > 0) {\n      const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n      const firstRightPinnedColumnIndex = visibleColumns.length - rightPinnedColumns.length;\n      return targetIndex >= firstRightPinnedColumnIndex ? false : initialValue;\n    }\n\n    return initialValue;\n  }, [apiRef, pinnedColumns]);\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState3, _pinnedColumnsToExpor, _pinnedColumnsToExpor2;\n\n    const pinnedColumnsToExport = gridPinnedColumnsSelector(apiRef.current.state);\n    const shouldExportPinnedColumns = // Always export if the `exportOnlyDirtyModels` property is activated\n    !context.exportOnlyDirtyModels || // Always export if the model is controlled\n    props.pinnedColumns != null || // Always export if the model has been initialized\n    ((_props$initialState3 = props.initialState) == null ? void 0 : _props$initialState3.pinnedColumns) != null || // Export if the model is not empty\n    ((_pinnedColumnsToExpor = pinnedColumnsToExport.left) != null ? _pinnedColumnsToExpor : []).length > 0 || ((_pinnedColumnsToExpor2 = pinnedColumnsToExport.right) != null ? _pinnedColumnsToExpor2 : []).length > 0;\n\n    if (!shouldExportPinnedColumns) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      pinnedColumns: pinnedColumnsToExport\n    });\n  }, [apiRef, props.pinnedColumns, (_props$initialState4 = props.initialState) == null ? void 0 : _props$initialState4.pinnedColumns]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const newPinnedColumns = context.stateToRestore.pinnedColumns;\n\n    if (newPinnedColumns != null) {\n      apiRef.current.setState(mergeStateWithPinnedColumns(newPinnedColumns));\n    }\n\n    return params;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'scrollToIndexes', calculateScrollLeft);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuButtons);\n  useGridRegisterPipeProcessor(apiRef, 'canBeReordered', checkIfCanBeReordered);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  apiRef.current.unstable_registerControlState({\n    stateId: 'pinnedColumns',\n    propModel: props.pinnedColumns,\n    propOnChange: props.onPinnedColumnsChange,\n    stateSelector: gridPinnedColumnsSelector,\n    changeEvent: 'pinnedColumnsChange'\n  });\n  const checkIfEnabled = React.useCallback(methodName => {\n    if (props.disableColumnPinning) {\n      throw new Error(`MUI: You cannot call \\`apiRef.current.${methodName}\\` when \\`disableColumnPinning\\` is true.`);\n    }\n  }, [props.disableColumnPinning]);\n  const pinColumn = React.useCallback((field, side) => {\n    checkIfEnabled('pinColumn');\n\n    if (apiRef.current.isColumnPinned(field) === side) {\n      return;\n    }\n\n    const otherSide = side === GridPinnedPosition.right ? GridPinnedPosition.left : GridPinnedPosition.right;\n    const newPinnedColumns = {\n      [side]: [...(pinnedColumns[side] || []), field],\n      [otherSide]: (pinnedColumns[otherSide] || []).filter(column => column !== field)\n    };\n    apiRef.current.setPinnedColumns(newPinnedColumns);\n  }, [apiRef, checkIfEnabled, pinnedColumns]);\n  const unpinColumn = React.useCallback(field => {\n    checkIfEnabled('unpinColumn');\n    apiRef.current.setPinnedColumns({\n      left: (pinnedColumns.left || []).filter(column => column !== field),\n      right: (pinnedColumns.right || []).filter(column => column !== field)\n    });\n  }, [apiRef, checkIfEnabled, pinnedColumns.left, pinnedColumns.right]);\n  const getPinnedColumns = React.useCallback(() => {\n    checkIfEnabled('getPinnedColumns');\n    return gridPinnedColumnsSelector(apiRef.current.state);\n  }, [apiRef, checkIfEnabled]);\n  const setPinnedColumns = React.useCallback(newPinnedColumns => {\n    checkIfEnabled('setPinnedColumns');\n    apiRef.current.setState(mergeStateWithPinnedColumns(newPinnedColumns));\n    apiRef.current.forceUpdate();\n  }, [apiRef, checkIfEnabled]);\n  const isColumnPinned = React.useCallback(field => {\n    checkIfEnabled('isColumnPinned');\n    const leftPinnedColumns = pinnedColumns.left || [];\n\n    if (leftPinnedColumns.includes(field)) {\n      return GridPinnedPosition.left;\n    }\n\n    const rightPinnedColumns = pinnedColumns.right || [];\n\n    if (rightPinnedColumns.includes(field)) {\n      return GridPinnedPosition.right;\n    }\n\n    return false;\n  }, [pinnedColumns.left, pinnedColumns.right, checkIfEnabled]);\n  const columnPinningApi = {\n    pinColumn,\n    unpinColumn,\n    getPinnedColumns,\n    setPinnedColumns,\n    isColumnPinned\n  };\n  useGridApiMethod(apiRef, columnPinningApi, 'columnPinningApi');\n  const handleColumnOrderChange = React.useCallback(params => {\n    if (!apiRef.current.unstable_caches.columnPinning.orderedFieldsBeforePinningColumns) {\n      return;\n    }\n\n    const {\n      field,\n      targetIndex,\n      oldIndex\n    } = params;\n    const delta = targetIndex > oldIndex ? 1 : -1;\n    const latestColumnFields = gridColumnFieldsSelector(apiRef);\n    /**\n     * When a column X is reordered to somewhere else, the position where this column X is dropped\n     * on must be moved to left or right to make room for it. The ^^^ below represents the column\n     * which gave space to receive X.\n     *\n     * | X | B | C | D | -> | B | C | D | X | (e.g. X moved to after D, so delta=1)\n     *              ^^^              ^^^\n     *\n     * | A | B | C | X | -> | X | A | B | C | (e.g. X moved before A, so delta=-1)\n     *  ^^^                      ^^^\n     *\n     * If column P is pinned, it will not move to provide space. However, it will jump to the next\n     * non-pinned column.\n     *\n     * | X | B | P | D | -> | B | D | P | X | (e.g. X moved to after D, with P pinned)\n     *              ^^^          ^^^\n     */\n\n    const siblingField = latestColumnFields[targetIndex - delta];\n    const newOrderedFieldsBeforePinningColumns = [...apiRef.current.unstable_caches.columnPinning.orderedFieldsBeforePinningColumns]; // The index to start swapping fields\n\n    let i = newOrderedFieldsBeforePinningColumns.findIndex(column => column === field); // The index of the field to swap with\n\n    let j = i + delta; // When to stop swapping fields.\n    // We stop one field before because the swap is done with i + 1 (if delta=1)\n\n    const stop = newOrderedFieldsBeforePinningColumns.findIndex(column => column === siblingField);\n\n    while (delta > 0 ? i < stop : i > stop) {\n      // If the field to swap with is a pinned column, jump to the next\n      while (apiRef.current.isColumnPinned(newOrderedFieldsBeforePinningColumns[j])) {\n        j += delta;\n      }\n\n      const temp = newOrderedFieldsBeforePinningColumns[i];\n      newOrderedFieldsBeforePinningColumns[i] = newOrderedFieldsBeforePinningColumns[j];\n      newOrderedFieldsBeforePinningColumns[j] = temp;\n      i = j;\n      j = i + delta;\n    }\n\n    apiRef.current.unstable_caches.columnPinning.orderedFieldsBeforePinningColumns = newOrderedFieldsBeforePinningColumns;\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'columnOrderChange', handleColumnOrderChange);\n  React.useEffect(() => {\n    if (props.pinnedColumns) {\n      apiRef.current.setPinnedColumns(props.pinnedColumns);\n    }\n  }, [apiRef, props.pinnedColumns]);\n};","map":null,"metadata":{},"sourceType":"module"}