{"ast":null,"code":"export default function asyncWorker(_ref) {\n  let {\n    work,\n    tasks,\n    done\n  } = _ref;\n\n  const myNonEssentialWork = deadline => {\n    // If there is a surplus time in the frame, or timeout\n    while ((deadline.timeRemaining() > 0 || deadline.didTimeout) && tasks.current > 0) {\n      work();\n    }\n\n    if (tasks.current > 0) {\n      requestIdleCallback(myNonEssentialWork);\n    } else {\n      done();\n    }\n  }; // Don't use requestIdleCallback if the time is mock, better to run synchronously in such case.\n\n\n  if (typeof requestIdleCallback === 'function' && !requestIdleCallback.clock) {\n    requestIdleCallback(myNonEssentialWork);\n  } else {\n    while (tasks.current > 0) {\n      work();\n    }\n\n    done();\n  }\n}","map":null,"metadata":{},"sourceType":"module"}