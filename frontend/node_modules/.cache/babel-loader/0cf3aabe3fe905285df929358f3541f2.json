{"ast":null,"code":"import { gridStringOrNumberComparator } from '@mui/x-data-grid-premium';\nimport { randomCity, randomCompanyName, randomCountry, randomCreatedDate, randomEmail, randomId, randomJobTitle, randomPhoneNumber, randomRating, randomUpdatedDate, randomUrl, randomUserName, randomBoolean, randomName, randomColor, randomInt } from '../services';\nimport { renderAvatar, renderCountry, renderEmail, renderLink, renderRating, renderEditRating, renderEditCountry } from '../renderer';\nimport { COUNTRY_ISO_OPTIONS_SORTED } from '../services/static-data';\nexport const getEmployeeColumns = () => [{\n  field: 'id',\n  generateData: randomId,\n  hide: true\n}, {\n  field: 'avatar',\n  headerName: 'Avatar',\n  generateData: randomColor,\n  renderCell: renderAvatar,\n  valueGetter: params => params.rowNode.isAutoGenerated ? null : {\n    name: params.row.name,\n    color: params.row.avatar\n  },\n  sortable: false,\n  filterable: false,\n  groupable: false,\n  aggregable: false,\n  disableExport: true\n}, {\n  field: 'name',\n  headerName: 'Name',\n  generateData: randomName,\n  dataGeneratorUniquenessEnabled: true,\n  width: 120,\n  editable: true,\n  groupable: false,\n  aggregable: false\n}, {\n  field: 'website',\n  headerName: 'Website',\n  generateData: randomUrl,\n  renderCell: renderLink,\n  width: 160,\n  editable: true,\n  groupable: false,\n  aggregable: false\n}, {\n  field: 'rating',\n  headerName: 'Rating',\n  generateData: randomRating,\n  renderCell: renderRating,\n  renderEditCell: renderEditRating,\n  width: 180,\n  type: 'number',\n  editable: true,\n  availableAggregationFunctions: ['avg', 'min', 'max', 'size']\n}, {\n  field: 'email',\n  headerName: 'Email',\n  generateData: randomEmail,\n  renderCell: renderEmail,\n  width: 150,\n  editable: true\n}, {\n  field: 'phone',\n  headerName: 'Phone',\n  generateData: randomPhoneNumber,\n  width: 150,\n  editable: true\n}, {\n  field: 'username',\n  headerName: 'Username',\n  generateData: randomUserName,\n  width: 150,\n  editable: true\n}, {\n  field: 'city',\n  headerName: 'City',\n  generateData: randomCity,\n  editable: true\n}, {\n  field: 'country',\n  headerName: 'Country',\n  type: 'singleSelect',\n  valueOptions: COUNTRY_ISO_OPTIONS_SORTED,\n  valueFormatter: _ref => {\n    let {\n      value\n    } = _ref;\n    return value == null ? void 0 : value.label;\n  },\n  generateData: randomCountry,\n  renderCell: renderCountry,\n  renderEditCell: renderEditCountry,\n  sortComparator: (v1, v2, param1, param2) => gridStringOrNumberComparator(v1.label, v2.label, param1, param2),\n  width: 150,\n  editable: true\n}, {\n  field: 'company',\n  headerName: 'Company',\n  generateData: randomCompanyName,\n  width: 180,\n  editable: true\n}, {\n  field: 'position',\n  headerName: 'Position',\n  generateData: randomJobTitle,\n  width: 180,\n  editable: true\n}, {\n  field: 'lastUpdated',\n  headerName: 'Updated on',\n  generateData: randomUpdatedDate,\n  type: 'dateTime',\n  width: 180,\n  editable: true\n}, {\n  field: 'dateCreated',\n  headerName: 'Created on',\n  generateData: randomCreatedDate,\n  type: 'date',\n  width: 120,\n  editable: true\n}, {\n  field: 'isAdmin',\n  headerName: 'Is admin?',\n  generateData: randomBoolean,\n  type: 'boolean',\n  width: 150,\n  editable: true\n}, {\n  field: 'salary',\n  headerName: 'Salary',\n  generateData: () => randomInt(30000, 80000),\n  type: 'number',\n  valueFormatter: _ref2 => {\n    let {\n      value\n    } = _ref2;\n\n    if (!value || typeof value !== 'number') {\n      return value;\n    }\n\n    return `${value.toLocaleString()}$`;\n  }\n}];","map":null,"metadata":{},"sourceType":"module"}