{"ast":null,"code":"import asyncWorker from './asyncWorker';\nexport function getRealGridData(rowLength, columns) {\n  return new Promise(resolve => {\n    const tasks = {\n      current: rowLength\n    };\n    const rows = [];\n    const indexedValues = {};\n\n    function work() {\n      const row = {};\n\n      for (let j = 0; j < columns.length; j += 1) {\n        const column = columns[j];\n\n        if (column.generateData) {\n          const context = {};\n\n          if (column.dataGeneratorUniquenessEnabled) {\n            let fieldValues = indexedValues[column.field];\n\n            if (!fieldValues) {\n              fieldValues = {};\n              indexedValues[column.field] = fieldValues;\n            }\n\n            context.values = fieldValues;\n          }\n\n          row[column.field] = column.generateData(row, context);\n        }\n      }\n\n      rows.push(row);\n      tasks.current -= 1;\n    }\n\n    const columnVisibilityModel = {};\n    columns.forEach(col => {\n      if (col.hide) {\n        columnVisibilityModel[col.field] = false;\n      }\n    });\n    asyncWorker({\n      work,\n      done: () => resolve({\n        columns,\n        rows,\n        initialState: {\n          columns: {\n            columnVisibilityModel\n          }\n        }\n      }),\n      tasks\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"module"}