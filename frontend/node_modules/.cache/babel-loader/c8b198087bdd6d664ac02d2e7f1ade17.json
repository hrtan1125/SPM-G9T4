{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { useGridApiContext } from '@mui/x-data-grid-premium';\nimport Slider, { sliderClasses } from '@mui/material/Slider';\nimport Tooltip from '@mui/material/Tooltip';\nimport { debounce } from '@mui/material/utils';\nimport { alpha, styled } from '@mui/material/styles';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst StyledSlider = styled(Slider)(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    display: 'flex',\n    height: '100%',\n    width: '100%',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 0,\n    borderRadius: 0,\n    [`& .${sliderClasses.rail}`]: {\n      height: '100%',\n      backgroundColor: 'transparent'\n    },\n    [`& .${sliderClasses.track}`]: {\n      height: '100%',\n      transition: theme.transitions.create('background-color', {\n        duration: theme.transitions.duration.shorter\n      }),\n      '&.low': {\n        backgroundColor: '#f44336'\n      },\n      '&.medium': {\n        backgroundColor: '#efbb5aa3'\n      },\n      '&.high': {\n        backgroundColor: '#088208a3'\n      }\n    },\n    [`& .${sliderClasses.thumb}`]: {\n      height: '100%',\n      width: 5,\n      borderRadius: 0,\n      marginTop: 0,\n      backgroundColor: alpha('#000000', 0.2)\n    }\n  };\n});\n\nconst ValueLabelComponent = props => {\n  const {\n    children,\n    open,\n    value\n  } = props;\n  return /*#__PURE__*/_jsx(Tooltip, {\n    open: open,\n    enterTouchDelay: 0,\n    placement: \"top\",\n    title: value,\n    children: children\n  });\n};\n\nfunction EditProgress(props) {\n  const {\n    id,\n    value,\n    field\n  } = props;\n  const [valueState, setValueState] = React.useState(Number(value));\n  const apiRef = useGridApiContext();\n  const updateCellEditProps = React.useCallback(newValue => {\n    apiRef.current.setEditCellValue({\n      id,\n      field,\n      value: newValue\n    });\n  }, [apiRef, field, id]);\n  const debouncedUpdateCellEditProps = React.useMemo(() => debounce(updateCellEditProps, 60), [updateCellEditProps]);\n\n  const handleChange = (event, newValue) => {\n    setValueState(newValue);\n    debouncedUpdateCellEditProps(newValue);\n  };\n\n  React.useEffect(() => {\n    setValueState(Number(value));\n  }, [value]);\n\n  const handleRef = element => {\n    if (element) {\n      element.querySelector('[type=\"range\"]').focus();\n    }\n  };\n\n  return /*#__PURE__*/_jsx(StyledSlider, {\n    ref: handleRef,\n    classes: {\n      track: clsx(valueState < 0.3 && \"low\", valueState >= 0.3 && valueState <= 0.7 && \"medium\", valueState > 0.7 && \"high\")\n    },\n    value: valueState,\n    max: 1,\n    step: 0.00001,\n    onChange: handleChange,\n    components: {\n      ValueLabel: ValueLabelComponent\n    },\n    valueLabelDisplay: \"auto\",\n    valueLabelFormat: newValue => `${(newValue * 100).toLocaleString()} %`\n  });\n}\n\nexport function renderEditProgress(params) {\n  return /*#__PURE__*/_jsx(EditProgress, _extends({}, params));\n}","map":null,"metadata":{},"sourceType":"module"}