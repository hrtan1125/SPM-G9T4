{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport * as React from 'react';\nimport { useGridSelector } from '@mui/x-data-grid-pro';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport InputLabel from '@mui/material/InputLabel';\nimport { unstable_useId as useId } from '@mui/material/utils';\nimport Select from '@mui/material/Select';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { canColumnHaveAggregationFunction, getAggregationFunctionLabel } from '../hooks/features/aggregation/gridAggregationUtils';\nimport { gridAggregationModelSelector } from '../hooks/features/aggregation/gridAggregationSelectors';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const GridAggregationColumnMenuItem = props => {\n  const {\n    column,\n    label,\n    availableAggregationFunctions\n  } = props;\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const id = useId();\n  const aggregationModel = useGridSelector(apiRef, gridAggregationModelSelector);\n  const selectedAggregationRule = React.useMemo(() => {\n    if (!column || !aggregationModel[column.field]) {\n      return '';\n    }\n\n    const aggregationFunctionName = aggregationModel[column.field];\n\n    if (canColumnHaveAggregationFunction({\n      column,\n      aggregationFunctionName,\n      aggregationFunction: rootProps.aggregationFunctions[aggregationFunctionName]\n    })) {\n      return aggregationFunctionName;\n    }\n\n    return '';\n  }, [rootProps.aggregationFunctions, aggregationModel, column]);\n\n  const handleAggregationItemChange = event => {\n    const newAggregationItem = event.target.value || undefined;\n    const currentModel = gridAggregationModelSelector(apiRef);\n\n    const _column$field = column.field,\n          otherColumnItems = _objectWithoutPropertiesLoose(currentModel, [_column$field].map(_toPropertyKey));\n\n    const newModel = newAggregationItem == null ? otherColumnItems : _extends({}, otherColumnItems, {\n      [column.field]: newAggregationItem\n    });\n    apiRef.current.setAggregationModel(newModel);\n    apiRef.current.hideColumnMenu();\n  };\n\n  return /*#__PURE__*/_jsx(MenuItem, {\n    disableRipple: true,\n    children: /*#__PURE__*/_jsxs(FormControl, {\n      size: \"small\",\n      sx: {\n        width: 150\n      },\n      children: [/*#__PURE__*/_jsx(InputLabel, {\n        id: `${id}-label`,\n        children: label\n      }), /*#__PURE__*/_jsxs(Select, {\n        labelId: `${id}-label`,\n        id: `${id}-input`,\n        value: selectedAggregationRule,\n        label: label,\n        onChange: handleAggregationItemChange,\n        onBlur: e => e.stopPropagation(),\n        fullWidth: true,\n        children: [/*#__PURE__*/_jsx(MenuItem, {\n          value: \"\",\n          children: \"...\"\n        }), availableAggregationFunctions.map(aggFunc => /*#__PURE__*/_jsx(MenuItem, {\n          value: aggFunc,\n          children: getAggregationFunctionLabel({\n            apiRef,\n            aggregationRule: {\n              aggregationFunctionName: aggFunc,\n              aggregationFunction: rootProps.aggregationFunctions[aggFunc]\n            }\n          })\n        }, aggFunc))]\n      })]\n    })\n  });\n};","map":null,"metadata":{},"sourceType":"module"}