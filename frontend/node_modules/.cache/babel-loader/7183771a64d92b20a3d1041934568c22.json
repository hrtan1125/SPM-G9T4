{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { gridColumnLookupSelector, useGridApiEventHandler, useGridApiMethod } from '@mui/x-data-grid-pro';\nimport { gridAggregationModelSelector } from './gridAggregationSelectors';\nimport { getAggregationRules, mergeStateWithAggregationModel, areAggregationRulesEqual } from './gridAggregationUtils';\nimport { createAggregationLookup } from './createAggregationLookup';\nexport const aggregationStateInitializer = (state, props, apiRef) => {\n  var _ref, _props$aggregationMod, _props$initialState, _props$initialState$a;\n\n  apiRef.current.unstable_caches.aggregation = {\n    rulesOnLastColumnHydration: {},\n    rulesOnLastRowHydration: {}\n  };\n  return _extends({}, state, {\n    aggregation: {\n      model: (_ref = (_props$aggregationMod = props.aggregationModel) != null ? _props$aggregationMod : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$a = _props$initialState.aggregation) == null ? void 0 : _props$initialState$a.model) != null ? _ref : {}\n    }\n  });\n};\nexport const useGridAggregation = (apiRef, props) => {\n  apiRef.current.unstable_registerControlState({\n    stateId: 'aggregation',\n    propModel: props.aggregationModel,\n    propOnChange: props.onAggregationModelChange,\n    stateSelector: gridAggregationModelSelector,\n    changeEvent: 'aggregationModelChange'\n  });\n  /**\n   * API METHODS\n   */\n\n  const setAggregationModel = React.useCallback(model => {\n    const currentModel = gridAggregationModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      apiRef.current.setState(mergeStateWithAggregationModel(model));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef]);\n  const applyAggregation = React.useCallback(() => {\n    const aggregationLookup = createAggregationLookup({\n      apiRef,\n      getAggregationPosition: props.getAggregationPosition,\n      aggregationFunctions: props.aggregationFunctions,\n      aggregationRowsScope: props.aggregationRowsScope\n    });\n    apiRef.current.setState(state => _extends({}, state, {\n      aggregation: _extends({}, state.aggregation, {\n        lookup: aggregationLookup\n      })\n    }));\n  }, [apiRef, props.getAggregationPosition, props.aggregationFunctions, props.aggregationRowsScope]);\n  const aggregationApi = {\n    setAggregationModel\n  };\n  useGridApiMethod(apiRef, aggregationApi, 'GridAggregationApi');\n  /**\n   * EVENTS\n   */\n\n  const checkAggregationRulesDiff = React.useCallback(() => {\n    const {\n      rulesOnLastRowHydration,\n      rulesOnLastColumnHydration\n    } = apiRef.current.unstable_caches.aggregation;\n    const aggregationRules = props.disableAggregation ? {} : getAggregationRules({\n      columnsLookup: gridColumnLookupSelector(apiRef),\n      aggregationModel: gridAggregationModelSelector(apiRef),\n      aggregationFunctions: props.aggregationFunctions\n    }); // Re-apply the row hydration to add / remove the aggregation footers\n\n    if (!areAggregationRulesEqual(rulesOnLastRowHydration, aggregationRules)) {\n      apiRef.current.unstable_requestPipeProcessorsApplication('hydrateRows');\n      applyAggregation();\n    } // Re-apply the column hydration to wrap / unwrap the aggregated columns\n\n\n    if (!areAggregationRulesEqual(rulesOnLastColumnHydration, aggregationRules)) {\n      apiRef.current.unstable_requestPipeProcessorsApplication('hydrateColumns');\n    }\n  }, [apiRef, applyAggregation, props.aggregationFunctions, props.disableAggregation]);\n  useGridApiEventHandler(apiRef, 'aggregationModelChange', checkAggregationRulesDiff);\n  useGridApiEventHandler(apiRef, 'columnsChange', checkAggregationRulesDiff);\n  useGridApiEventHandler(apiRef, 'filteredRowsSet', applyAggregation);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.aggregationModel !== undefined) {\n      apiRef.current.setAggregationModel(props.aggregationModel);\n    }\n  }, [apiRef, props.aggregationModel]);\n};","map":null,"metadata":{},"sourceType":"module"}