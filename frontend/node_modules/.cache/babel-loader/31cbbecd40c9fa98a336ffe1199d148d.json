{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"disableVirtualization\"];\nimport * as React from 'react';\nimport { styled, alpha } from '@mui/material/styles';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { useGridSelector, getDataGridUtilityClass, gridClasses, gridVisibleColumnFieldsSelector, gridRowsMetaSelector, useGridApiEventHandler } from '@mui/x-data-grid';\nimport { GridVirtualScroller, GridVirtualScrollerContent, GridVirtualScrollerRenderZone, useGridVirtualScroller, calculatePinnedRowsHeight } from '@mui/x-data-grid/internals';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { gridPinnedColumnsSelector, GridPinnedPosition } from '../hooks/features/columnPinning';\nimport { gridDetailPanelExpandedRowsContentCacheSelector, gridDetailPanelExpandedRowsHeightCacheSelector, gridDetailPanelExpandedRowIdsSelector } from '../hooks/features/detailPanel';\nimport { GridDetailPanel } from './GridDetailPanel';\nimport { gridPinnedRowsSelector } from '../hooks/features/rowPinning/gridRowPinningSelector';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const filterColumns = (pinnedColumns, columns) => {\n  var _pinnedColumns$left, _pinnedColumns$right;\n\n  if (!Array.isArray(pinnedColumns.left) && !Array.isArray(pinnedColumns.right)) {\n    return [[], []];\n  }\n\n  if (((_pinnedColumns$left = pinnedColumns.left) == null ? void 0 : _pinnedColumns$left.length) === 0 && ((_pinnedColumns$right = pinnedColumns.right) == null ? void 0 : _pinnedColumns$right.length) === 0) {\n    return [[], []];\n  }\n\n  const filter = (newPinnedColumns, remainingColumns) => {\n    if (!Array.isArray(newPinnedColumns)) {\n      return [];\n    }\n\n    return newPinnedColumns.filter(field => remainingColumns.includes(field));\n  };\n\n  const leftPinnedColumns = filter(pinnedColumns.left, columns);\n  const columnsWithoutLeftPinnedColumns = columns.filter( // Filter out from the remaining columns those columns already pinned to the left\n  field => !leftPinnedColumns.includes(field));\n  const rightPinnedColumns = filter(pinnedColumns.right, columnsWithoutLeftPinnedColumns);\n  return [leftPinnedColumns, rightPinnedColumns];\n};\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    leftPinnedColumns: ['pinnedColumns', 'pinnedColumns--left'],\n    rightPinnedColumns: ['pinnedColumns', 'pinnedColumns--right'],\n    topPinnedRows: ['pinnedRows', 'pinnedRows--top'],\n    bottomPinnedRows: ['pinnedRows', 'pinnedRows--bottom'],\n    pinnedRowsRenderZone: ['pinnedRowsRenderZone'],\n    detailPanels: ['detailPanels'],\n    detailPanel: ['detailPanel']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n}; // Inspired by https://github.com/material-components/material-components-ios/blob/bca36107405594d5b7b16265a5b0ed698f85a5ee/components/Elevation/src/UIColor%2BMaterialElevation.m#L61\n\n\nconst getOverlayAlpha = elevation => {\n  let alphaValue;\n\n  if (elevation < 1) {\n    alphaValue = 5.11916 * elevation ** 2;\n  } else {\n    alphaValue = 4.5 * Math.log(elevation + 1) + 2;\n  }\n\n  return alphaValue / 100;\n};\n\nconst getBoxShadowColor = theme => {\n  return alpha(theme.palette.common.black, 0.21);\n};\n\nconst VirtualScrollerDetailPanels = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'DetailPanels',\n  overridesResolver: (props, styles) => styles.detailPanels\n})({\n  position: 'relative'\n});\nconst darkModeBackgroundImage = `linear-gradient(${alpha('#fff', getOverlayAlpha(2))}, ${alpha('#fff', getOverlayAlpha(2))})`;\nconst VirtualScrollerPinnedColumns = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'PinnedColumns',\n  overridesResolver: (props, styles) => [{\n    [`&.${gridClasses['pinnedColumns--left']}`]: styles['pinnedColumns--left']\n  }, {\n    [`&.${gridClasses['pinnedColumns--right']}`]: styles['pinnedColumns--right']\n  }, styles.pinnedColumns]\n})(_ref => {\n  let {\n    theme,\n    ownerState\n  } = _ref;\n  const boxShadowColor = getBoxShadowColor(theme);\n  return _extends({\n    position: 'sticky',\n    overflow: 'hidden',\n    zIndex: 1,\n    backgroundColor: theme.palette.background.default\n  }, theme.palette.mode === 'dark' && {\n    backgroundImage: darkModeBackgroundImage\n  }, ownerState.side === GridPinnedPosition.left && {\n    left: 0,\n    float: 'left',\n    boxShadow: `2px 0px 4px -2px ${boxShadowColor}`\n  }, ownerState.side === GridPinnedPosition.right && {\n    right: 0,\n    float: 'right',\n    boxShadow: `-2px 0px 4px -2px ${boxShadowColor}`\n  });\n});\nconst VirtualScrollerPinnedRows = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'PinnedRows',\n  overridesResolver: (props, styles) => [{\n    [`&.${gridClasses['pinnedRows--top']}`]: styles['pinnedRows--top']\n  }, {\n    [`&.${gridClasses['pinnedRows--bottom']}`]: styles['pinnedRows--bottom']\n  }, styles.pinnedRows]\n})(_ref2 => {\n  let {\n    theme,\n    ownerState\n  } = _ref2;\n  const boxShadowColor = getBoxShadowColor(theme);\n  return _extends({\n    position: 'sticky',\n    // should be above the detail panel\n    zIndex: 3,\n    backgroundColor: theme.palette.background.default\n  }, theme.palette.mode === 'dark' && {\n    backgroundImage: darkModeBackgroundImage\n  }, ownerState.position === 'top' && {\n    top: 0,\n    boxShadow: `0px 3px 4px -2px ${boxShadowColor}`\n  }, ownerState.position === 'bottom' && {\n    boxShadow: `0px -3px 4px -2px ${boxShadowColor}`,\n    bottom: 0\n  });\n});\nconst VirtualScrollerPinnedRowsRenderZone = styled('div')({\n  position: 'absolute'\n});\nconst DataGridProVirtualScroller = /*#__PURE__*/React.forwardRef(function DataGridProVirtualScroller(props, ref) {\n  const other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumnFields = useGridSelector(apiRef, gridVisibleColumnFieldsSelector);\n  const expandedRowIds = useGridSelector(apiRef, gridDetailPanelExpandedRowIdsSelector);\n  const detailPanelsContent = useGridSelector(apiRef, gridDetailPanelExpandedRowsContentCacheSelector);\n  const detailPanelsHeights = useGridSelector(apiRef, gridDetailPanelExpandedRowsHeightCacheSelector);\n  const leftColumns = React.useRef(null);\n  const rightColumns = React.useRef(null);\n  const topPinnedRowsRenderZoneRef = React.useRef(null);\n  const bottomPinnedRowsRenderZoneRef = React.useRef(null);\n  const handleRenderZonePositioning = React.useCallback(_ref3 => {\n    let {\n      top,\n      left\n    } = _ref3;\n\n    if (leftColumns.current) {\n      leftColumns.current.style.transform = `translate3d(0px, ${top}px, 0px)`;\n    }\n\n    if (rightColumns.current) {\n      rightColumns.current.style.transform = `translate3d(0px, ${top}px, 0px)`;\n    }\n\n    if (topPinnedRowsRenderZoneRef.current) {\n      topPinnedRowsRenderZoneRef.current.style.transform = `translate3d(${left}px, 0px, 0px)`;\n    }\n\n    if (bottomPinnedRowsRenderZoneRef.current) {\n      bottomPinnedRowsRenderZoneRef.current.style.transform = `translate3d(${left}px, 0px, 0px)`;\n    }\n  }, []);\n\n  const getRowProps = id => {\n    if (!expandedRowIds.includes(id)) {\n      return null;\n    }\n\n    const height = detailPanelsHeights[id];\n    return {\n      style: {\n        marginBottom: height\n      }\n    };\n  };\n\n  const pinnedColumns = useGridSelector(apiRef, gridPinnedColumnsSelector);\n  const [leftPinnedColumns, rightPinnedColumns] = filterColumns(pinnedColumns, visibleColumnFields);\n  const pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);\n  const topPinnedRowsData = React.useMemo(() => (pinnedRows == null ? void 0 : pinnedRows.top) || [], [pinnedRows == null ? void 0 : pinnedRows.top]);\n  const bottomPinnedRowsData = React.useMemo(() => (pinnedRows == null ? void 0 : pinnedRows.bottom) || [], [pinnedRows == null ? void 0 : pinnedRows.bottom]);\n  const ownerState = {\n    classes: rootProps.classes,\n    leftPinnedColumns,\n    rightPinnedColumns,\n    topPinnedRowsCount: topPinnedRowsData.length,\n    bottomPinnedRowsCount: bottomPinnedRowsData.length\n  };\n  const classes = useUtilityClasses(ownerState);\n  const {\n    renderContext,\n    getRows,\n    getRootProps,\n    getContentProps,\n    getRenderZoneProps,\n    updateRenderZonePosition\n  } = useGridVirtualScroller(_extends({\n    ref,\n    renderZoneMinColumnIndex: leftPinnedColumns.length,\n    renderZoneMaxColumnIndex: visibleColumnFields.length - rightPinnedColumns.length,\n    onRenderZonePositioning: handleRenderZonePositioning,\n    getRowProps\n  }, props));\n  const refreshRenderZonePosition = React.useCallback(() => {\n    if (renderContext) {\n      updateRenderZonePosition(renderContext);\n    }\n  }, [renderContext, updateRenderZonePosition]);\n  useGridApiEventHandler(apiRef, 'columnWidthChange', refreshRenderZonePosition);\n  useGridApiEventHandler(apiRef, 'columnOrderChange', refreshRenderZonePosition);\n  useGridApiEventHandler(apiRef, 'rowOrderChange', refreshRenderZonePosition);\n  const leftRenderContext = renderContext && leftPinnedColumns.length > 0 ? _extends({}, renderContext, {\n    firstColumnIndex: 0,\n    lastColumnIndex: leftPinnedColumns.length\n  }) : null;\n  const rightRenderContext = renderContext && rightPinnedColumns.length > 0 ? _extends({}, renderContext, {\n    firstColumnIndex: visibleColumnFields.length - rightPinnedColumns.length,\n    lastColumnIndex: visibleColumnFields.length\n  }) : null;\n\n  const getDetailPanels = () => {\n    const panels = [];\n\n    if (rootProps.getDetailPanelContent == null) {\n      return panels;\n    }\n\n    const rowsMeta = gridRowsMetaSelector(apiRef.current.state);\n    const uniqueExpandedRowIds = Array.from(new Set([...expandedRowIds]).values());\n\n    for (let i = 0; i < uniqueExpandedRowIds.length; i += 1) {\n      const id = uniqueExpandedRowIds[i];\n      const content = detailPanelsContent[id]; // Check if the id exists in the current page\n\n      const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(id);\n      const exists = rowIndex !== undefined;\n\n      if ( /*#__PURE__*/React.isValidElement(content) && exists) {\n        const hasAutoHeight = apiRef.current.unstable_detailPanelHasAutoHeight(id);\n        const height = hasAutoHeight ? 'auto' : detailPanelsHeights[id];\n        const sizes = apiRef.current.unstable_getRowInternalSizes(id);\n        const spacingTop = (sizes == null ? void 0 : sizes.spacingTop) || 0;\n        const top = rowsMeta.positions[rowIndex] + apiRef.current.unstable_getRowHeight(id) + spacingTop;\n        panels.push( /*#__PURE__*/_jsx(GridDetailPanel, {\n          rowId: id,\n          style: {\n            top\n          },\n          height: height,\n          className: classes.detailPanel,\n          children: content\n        }, i));\n      }\n    }\n\n    return panels;\n  };\n\n  const detailPanels = getDetailPanels();\n  const topPinnedRows = getRows({\n    renderContext,\n    rows: topPinnedRowsData,\n    position: 'center'\n  });\n  const pinnedRowsHeight = calculatePinnedRowsHeight(apiRef);\n  const mainRows = getRows({\n    renderContext,\n    rowIndexOffset: topPinnedRowsData.length,\n    position: 'center'\n  });\n  const bottomPinnedRows = getRows({\n    renderContext,\n    rows: bottomPinnedRowsData,\n    rowIndexOffset: topPinnedRowsData.length + (mainRows ? mainRows.length : 0),\n    position: 'center'\n  });\n  const contentProps = getContentProps();\n  const pinnedColumnsStyle = {\n    minHeight: contentProps.style.minHeight\n  };\n\n  if (contentProps.style.minHeight && contentProps.style.minHeight === '100%') {\n    contentProps.style.minHeight = `calc(100% - ${pinnedRowsHeight.top}px - ${pinnedRowsHeight.bottom}px)`;\n  }\n\n  return /*#__PURE__*/_jsxs(GridVirtualScroller, _extends({}, getRootProps(other), {\n    children: [topPinnedRowsData.length > 0 ? /*#__PURE__*/_jsxs(VirtualScrollerPinnedRows, {\n      className: classes.topPinnedRows,\n      ownerState: {\n        position: 'top'\n      },\n      style: {\n        width: contentProps.style.width,\n        height: pinnedRowsHeight.top\n      },\n      role: \"rowgroup\",\n      children: [leftRenderContext && /*#__PURE__*/_jsx(VirtualScrollerPinnedColumns, {\n        className: classes.leftPinnedColumns,\n        ownerState: {\n          side: GridPinnedPosition.left\n        },\n        children: getRows({\n          renderContext: leftRenderContext,\n          minFirstColumn: leftRenderContext.firstColumnIndex,\n          maxLastColumn: leftRenderContext.lastColumnIndex,\n          availableSpace: 0,\n          rows: topPinnedRowsData,\n          position: 'left'\n        })\n      }), /*#__PURE__*/_jsx(VirtualScrollerPinnedRowsRenderZone, {\n        className: classes.pinnedRowsRenderZone,\n        ref: topPinnedRowsRenderZoneRef,\n        role: \"presentation\",\n        children: topPinnedRows\n      }), rightRenderContext && /*#__PURE__*/_jsx(VirtualScrollerPinnedColumns, {\n        className: classes.rightPinnedColumns,\n        ownerState: {\n          side: GridPinnedPosition.right\n        },\n        children: getRows({\n          renderContext: rightRenderContext,\n          minFirstColumn: rightRenderContext.firstColumnIndex,\n          maxLastColumn: rightRenderContext.lastColumnIndex,\n          availableSpace: 0,\n          rows: topPinnedRowsData,\n          position: 'right'\n        })\n      })]\n    }) : null, /*#__PURE__*/_jsxs(GridVirtualScrollerContent, _extends({}, contentProps, {\n      children: [leftRenderContext && /*#__PURE__*/_jsx(VirtualScrollerPinnedColumns, {\n        ref: leftColumns,\n        className: classes.leftPinnedColumns,\n        ownerState: {\n          side: GridPinnedPosition.left\n        },\n        style: pinnedColumnsStyle,\n        children: getRows({\n          renderContext: leftRenderContext,\n          minFirstColumn: leftRenderContext.firstColumnIndex,\n          maxLastColumn: leftRenderContext.lastColumnIndex,\n          availableSpace: 0,\n          rowIndexOffset: topPinnedRowsData.length,\n          position: 'left'\n        })\n      }), /*#__PURE__*/_jsx(GridVirtualScrollerRenderZone, _extends({}, getRenderZoneProps(), {\n        children: mainRows\n      })), rightRenderContext && /*#__PURE__*/_jsx(VirtualScrollerPinnedColumns, {\n        ref: rightColumns,\n        ownerState: {\n          side: GridPinnedPosition.right\n        },\n        className: classes.rightPinnedColumns,\n        style: pinnedColumnsStyle,\n        children: getRows({\n          renderContext: rightRenderContext,\n          minFirstColumn: rightRenderContext.firstColumnIndex,\n          maxLastColumn: rightRenderContext.lastColumnIndex,\n          availableSpace: 0,\n          rowIndexOffset: topPinnedRowsData.length,\n          position: 'right'\n        })\n      }), detailPanels.length > 0 && /*#__PURE__*/_jsx(VirtualScrollerDetailPanels, {\n        className: classes.detailPanels,\n        children: detailPanels\n      })]\n    })), bottomPinnedRowsData.length > 0 ? /*#__PURE__*/_jsxs(VirtualScrollerPinnedRows, {\n      className: classes.bottomPinnedRows,\n      ownerState: {\n        position: 'bottom'\n      },\n      style: {\n        width: contentProps.style.width,\n        height: pinnedRowsHeight.bottom\n      },\n      role: \"rowgroup\",\n      children: [leftRenderContext && /*#__PURE__*/_jsx(VirtualScrollerPinnedColumns, {\n        className: classes.leftPinnedColumns,\n        ownerState: {\n          side: GridPinnedPosition.left\n        },\n        children: getRows({\n          renderContext: leftRenderContext,\n          minFirstColumn: leftRenderContext.firstColumnIndex,\n          maxLastColumn: leftRenderContext.lastColumnIndex,\n          availableSpace: 0,\n          rows: bottomPinnedRowsData,\n          rowIndexOffset: topPinnedRowsData.length + (mainRows ? mainRows.length : 0),\n          position: 'left'\n        })\n      }), /*#__PURE__*/_jsx(VirtualScrollerPinnedRowsRenderZone, {\n        className: classes.pinnedRowsRenderZone,\n        ref: bottomPinnedRowsRenderZoneRef,\n        role: \"presentation\",\n        children: bottomPinnedRows\n      }), rightRenderContext && /*#__PURE__*/_jsx(VirtualScrollerPinnedColumns, {\n        className: classes.rightPinnedColumns,\n        ownerState: {\n          side: GridPinnedPosition.right\n        },\n        children: getRows({\n          renderContext: rightRenderContext,\n          minFirstColumn: rightRenderContext.firstColumnIndex,\n          maxLastColumn: rightRenderContext.lastColumnIndex,\n          availableSpace: 0,\n          rows: bottomPinnedRowsData,\n          rowIndexOffset: topPinnedRowsData.length + (mainRows ? mainRows.length : 0),\n          position: 'right'\n        })\n      })]\n    }) : null]\n  }));\n});\nexport { DataGridProVirtualScroller };","map":null,"metadata":{},"sourceType":"module"}