{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { GRID_DATE_COL_DEF, GRID_DATETIME_COL_DEF } from '@mui/x-data-grid-pro';\nimport { buildWarning } from '@mui/x-data-grid/internals';\n\nconst getExcelJs = async () => {\n  const {\n    default: excelJsDefault\n  } = await import('exceljs');\n  return excelJsDefault;\n};\n\nconst warnInvalidFormattedValue = buildWarning(['MUI: When the value of a field is an object or a `renderCell` is provided, the Excel export might not display the value correctly.', 'You can provide a `valueFormatter` with a string representation to be used.']);\n\nconst getFormattedValueOptions = (colDef, valueOptions, api) => {\n  if (!colDef.valueOptions) {\n    return [];\n  }\n\n  let valueOptionsFormatted = valueOptions;\n\n  if (colDef.valueFormatter) {\n    valueOptionsFormatted = valueOptionsFormatted.map(option => {\n      if (typeof option === 'object') {\n        return option;\n      }\n\n      const params = {\n        field: colDef.field,\n        api,\n        value: option\n      };\n      return String(colDef.valueFormatter(params));\n    });\n  }\n\n  return valueOptionsFormatted.map(option => typeof option === 'object' ? option.label : option);\n};\n\nconst serializeRow = (id, columns, api, defaultValueOptionsFormulae) => {\n  const row = {};\n  const dataValidation = {};\n  const mergedCells = [];\n  const firstCellParams = api.getCellParams(id, columns[0].field);\n  const outlineLevel = firstCellParams.rowNode.depth; // `colSpan` is only calculated for rendered rows, so we need to calculate it during export for every row\n\n  api.unstable_calculateColSpan({\n    rowId: id,\n    minFirstColumn: 0,\n    maxLastColumn: columns.length,\n    columns\n  });\n  columns.forEach((column, colIndex) => {\n    const colSpanInfo = api.unstable_getCellColSpanInfo(id, colIndex);\n\n    if (colSpanInfo && colSpanInfo.spannedByColSpan) {\n      return;\n    }\n\n    if (colSpanInfo && colSpanInfo.cellProps.colSpan > 1) {\n      mergedCells.push({\n        leftIndex: colIndex + 1,\n        rightIndex: colIndex + colSpanInfo.cellProps.colSpan\n      });\n    }\n\n    const cellParams = api.getCellParams(id, column.field);\n\n    switch (cellParams.colDef.type) {\n      case 'singleSelect':\n        {\n          var _formattedValue$label;\n\n          if (typeof cellParams.colDef.valueOptions === 'function') {\n            // If value option depends on the row, set specific options to the cell\n            // This dataValidation is buggy with LibreOffice and does not allow to have coma\n            const valueOptions = cellParams.colDef.valueOptions({\n              id,\n              row,\n              field: cellParams.field\n            });\n            const formattedValueOptions = getFormattedValueOptions(cellParams.colDef, valueOptions, api);\n            dataValidation[column.field] = {\n              type: 'list',\n              allowBlank: true,\n              formulae: [`\"${formattedValueOptions.map(x => x.toString().replaceAll(',', 'CHAR(44)')).join(',')}\"`]\n            };\n          } else {\n            // If value option is defined for the column, refer to another sheet\n            dataValidation[column.field] = {\n              type: 'list',\n              allowBlank: true,\n              formulae: [defaultValueOptionsFormulae[column.field]]\n            };\n          }\n\n          const formattedValue = api.getCellParams(id, column.field).formattedValue;\n\n          if (process.env.NODE_ENV !== 'production') {\n            if (String(cellParams.formattedValue) === '[object Object]') {\n              warnInvalidFormattedValue();\n            }\n          }\n\n          row[column.field] = (_formattedValue$label = formattedValue == null ? void 0 : formattedValue.label) != null ? _formattedValue$label : formattedValue;\n          break;\n        }\n\n      case 'boolean':\n      case 'number':\n        row[column.field] = api.getCellParams(id, column.field).value;\n        break;\n\n      case 'date':\n      case 'dateTime':\n        {\n          // Excel does not do any timezone conversion, so we create a date using UTC instead of local timezone\n          // Solution from: https://github.com/exceljs/exceljs/issues/486#issuecomment-432557582\n          // About Date.UTC(): https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC#exemples\n          const date = api.getCellParams(id, column.field).value; // value may be `undefined` in auto-generated grouping rows\n\n          if (!date) {\n            break;\n          }\n\n          const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds()));\n          row[column.field] = utcDate;\n          break;\n        }\n\n      case 'actions':\n        break;\n\n      default:\n        row[column.field] = api.getCellParams(id, column.field).formattedValue;\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (String(cellParams.formattedValue) === '[object Object]') {\n            warnInvalidFormattedValue();\n          }\n        }\n\n        break;\n    }\n  });\n  return {\n    row,\n    dataValidation,\n    outlineLevel,\n    mergedCells\n  };\n};\n\nconst defaultColumnsStyles = {\n  [GRID_DATE_COL_DEF.type]: {\n    numFmt: 'dd.mm.yyyy'\n  },\n  [GRID_DATETIME_COL_DEF.type]: {\n    numFmt: 'dd.mm.yyyy hh:mm'\n  }\n};\n\nconst serializeColumn = (column, columnsStyles) => {\n  const {\n    field,\n    type\n  } = column;\n  return {\n    key: field,\n    // Excel width must stay between 0 and 255 (https://support.microsoft.com/en-us/office/change-the-column-width-and-row-height-72f5e3cc-994d-43e8-ae58-9774a0905f46)\n    // From the example of column width behavior (https://docs.microsoft.com/en-US/office/troubleshoot/excel/determine-column-widths#example-of-column-width-behavior)\n    // a value of 10 corresponds to 75px. This is an approximation, because column width depends on the the font-size\n    width: Math.min(255, column.width ? column.width / 7.5 : 8.43),\n    style: _extends({}, type && (defaultColumnsStyles == null ? void 0 : defaultColumnsStyles[type]), columnsStyles == null ? void 0 : columnsStyles[field])\n  };\n};\n\nconst addColumnGroupingHeaders = (worksheet, columns, api) => {\n  const maxDepth = Math.max(...columns.map(_ref => {\n    let {\n      field\n    } = _ref;\n\n    var _api$unstable_getColu, _api$unstable_getColu2;\n\n    return (_api$unstable_getColu = (_api$unstable_getColu2 = api.unstable_getColumnGroupPath(field)) == null ? void 0 : _api$unstable_getColu2.length) != null ? _api$unstable_getColu : 0;\n  }));\n\n  if (maxDepth === 0) {\n    return;\n  }\n\n  const columnGroupDetails = api.unstable_getAllGroupDetails();\n\n  for (let rowIndex = 0; rowIndex < maxDepth; rowIndex += 1) {\n    const row = columns.map(_ref2 => {\n      let {\n        field\n      } = _ref2;\n      const groupingPath = api.unstable_getColumnGroupPath(field);\n\n      if (groupingPath.length <= rowIndex) {\n        return {\n          groupId: null,\n          parents: groupingPath\n        };\n      }\n\n      return _extends({}, columnGroupDetails[groupingPath[rowIndex]], {\n        parents: groupingPath.slice(0, rowIndex)\n      });\n    });\n    const newRow = worksheet.addRow(row.map(group => group.groupId === null ? null : (group == null ? void 0 : group.headerName) || group.groupId)); // use `rowCount`, since worksheet can have additional rows added in `exceljsPreProcess`\n\n    const lastRowIndex = newRow.worksheet.rowCount;\n    let leftIndex = 0;\n    let rightIndex = 1;\n\n    while (rightIndex < columns.length) {\n      const {\n        groupId: leftGroupId,\n        parents: leftParents\n      } = row[leftIndex];\n      const {\n        groupId: rightGroupId,\n        parents: rightParents\n      } = row[rightIndex];\n      const areInSameGroup = leftGroupId === rightGroupId && leftParents.length === rightParents.length && leftParents.every((leftParent, index) => rightParents[index] === leftParent);\n\n      if (areInSameGroup) {\n        rightIndex += 1;\n      } else {\n        if (rightIndex - leftIndex > 1) {\n          worksheet.mergeCells(lastRowIndex, leftIndex + 1, lastRowIndex, rightIndex);\n        }\n\n        leftIndex = rightIndex;\n        rightIndex += 1;\n      }\n    }\n\n    if (rightIndex - leftIndex > 1) {\n      worksheet.mergeCells(lastRowIndex, leftIndex + 1, lastRowIndex, rightIndex);\n    }\n  }\n};\n\nexport async function buildExcel(options, api) {\n  const {\n    columns,\n    rowIds,\n    includeHeaders,\n    includeColumnGroupsHeaders,\n    valueOptionsSheetName,\n    exceljsPreProcess,\n    exceljsPostProcess,\n    columnsStyles = {}\n  } = options;\n  const excelJS = await getExcelJs();\n  const workbook = new excelJS.Workbook();\n  const worksheet = workbook.addWorksheet('Sheet1');\n  worksheet.columns = columns.map(column => serializeColumn(column, columnsStyles));\n\n  if (exceljsPreProcess) {\n    await exceljsPreProcess({\n      workbook,\n      worksheet\n    });\n  }\n\n  if (includeColumnGroupsHeaders) {\n    addColumnGroupingHeaders(worksheet, columns, api);\n  }\n\n  if (includeHeaders) {\n    worksheet.addRow(columns.map(column => column.headerName || column.field));\n  }\n\n  const columnsWithArrayValueOptions = columns.filter(column => column.type === 'singleSelect' && column.valueOptions && typeof column.valueOptions !== 'function');\n  const defaultValueOptionsFormulae = {};\n\n  if (columnsWithArrayValueOptions.length) {\n    const valueOptionsWorksheet = workbook.addWorksheet(valueOptionsSheetName);\n    valueOptionsWorksheet.columns = columnsWithArrayValueOptions.map(_ref3 => {\n      let {\n        field\n      } = _ref3;\n      return {\n        key: field\n      };\n    });\n    columnsWithArrayValueOptions.forEach(column => {\n      const formattedValueOptions = getFormattedValueOptions(column, column.valueOptions, api);\n      valueOptionsWorksheet.getColumn(column.field).values = [column.headerName || column.field, ...formattedValueOptions];\n      const columnLetter = valueOptionsWorksheet.getColumn(column.field).letter;\n      defaultValueOptionsFormulae[column.field] = `${valueOptionsSheetName}!$${columnLetter}$2:$${columnLetter}$${1 + formattedValueOptions.length}`;\n    });\n  }\n\n  rowIds.forEach(id => {\n    const {\n      row,\n      dataValidation,\n      outlineLevel,\n      mergedCells\n    } = serializeRow(id, columns, api, defaultValueOptionsFormulae);\n    const newRow = worksheet.addRow(row);\n    Object.keys(dataValidation).forEach(field => {\n      newRow.getCell(field).dataValidation = _extends({}, dataValidation[field]);\n    });\n\n    if (outlineLevel) {\n      newRow.outlineLevel = outlineLevel;\n    } // use `rowCount`, since worksheet can have additional rows added in `exceljsPreProcess`\n\n\n    const lastRowIndex = newRow.worksheet.rowCount;\n    mergedCells.forEach(mergedCell => {\n      worksheet.mergeCells(lastRowIndex, mergedCell.leftIndex, lastRowIndex, mergedCell.rightIndex);\n    });\n  });\n\n  if (exceljsPostProcess) {\n    await exceljsPostProcess({\n      workbook,\n      worksheet\n    });\n  }\n\n  return workbook;\n}","map":{"version":3,"names":["_extends","GRID_DATE_COL_DEF","GRID_DATETIME_COL_DEF","buildWarning","getExcelJs","default","excelJsDefault","warnInvalidFormattedValue","getFormattedValueOptions","colDef","valueOptions","api","valueOptionsFormatted","valueFormatter","map","option","params","field","value","String","label","serializeRow","id","columns","defaultValueOptionsFormulae","row","dataValidation","mergedCells","firstCellParams","getCellParams","outlineLevel","rowNode","depth","unstable_calculateColSpan","rowId","minFirstColumn","maxLastColumn","length","forEach","column","colIndex","colSpanInfo","unstable_getCellColSpanInfo","spannedByColSpan","cellProps","colSpan","push","leftIndex","rightIndex","cellParams","type","_formattedValue$label","formattedValueOptions","allowBlank","formulae","x","toString","replaceAll","join","formattedValue","process","env","NODE_ENV","date","utcDate","Date","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","defaultColumnsStyles","numFmt","serializeColumn","columnsStyles","key","width","Math","min","style","addColumnGroupingHeaders","worksheet","maxDepth","max","_api$unstable_getColu","_api$unstable_getColu2","unstable_getColumnGroupPath","columnGroupDetails","unstable_getAllGroupDetails","rowIndex","groupingPath","groupId","parents","slice","newRow","addRow","group","headerName","lastRowIndex","rowCount","leftGroupId","leftParents","rightGroupId","rightParents","areInSameGroup","every","leftParent","index","mergeCells","buildExcel","options","rowIds","includeHeaders","includeColumnGroupsHeaders","valueOptionsSheetName","exceljsPreProcess","exceljsPostProcess","excelJS","workbook","Workbook","addWorksheet","columnsWithArrayValueOptions","filter","valueOptionsWorksheet","getColumn","values","columnLetter","letter","Object","keys","getCell","mergedCell"],"sources":["C:/Users/Brian/Documents/GitHub/SPM-G9T4/frontend/node_modules/@mui/x-data-grid-premium/hooks/features/export/serializer/excelSerializer.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { GRID_DATE_COL_DEF, GRID_DATETIME_COL_DEF } from '@mui/x-data-grid-pro';\nimport { buildWarning } from '@mui/x-data-grid/internals';\n\nconst getExcelJs = async () => {\n  const {\n    default: excelJsDefault\n  } = await import('exceljs');\n  return excelJsDefault;\n};\n\nconst warnInvalidFormattedValue = buildWarning(['MUI: When the value of a field is an object or a `renderCell` is provided, the Excel export might not display the value correctly.', 'You can provide a `valueFormatter` with a string representation to be used.']);\n\nconst getFormattedValueOptions = (colDef, valueOptions, api) => {\n  if (!colDef.valueOptions) {\n    return [];\n  }\n\n  let valueOptionsFormatted = valueOptions;\n\n  if (colDef.valueFormatter) {\n    valueOptionsFormatted = valueOptionsFormatted.map(option => {\n      if (typeof option === 'object') {\n        return option;\n      }\n\n      const params = {\n        field: colDef.field,\n        api,\n        value: option\n      };\n      return String(colDef.valueFormatter(params));\n    });\n  }\n\n  return valueOptionsFormatted.map(option => typeof option === 'object' ? option.label : option);\n};\n\nconst serializeRow = (id, columns, api, defaultValueOptionsFormulae) => {\n  const row = {};\n  const dataValidation = {};\n  const mergedCells = [];\n  const firstCellParams = api.getCellParams(id, columns[0].field);\n  const outlineLevel = firstCellParams.rowNode.depth; // `colSpan` is only calculated for rendered rows, so we need to calculate it during export for every row\n\n  api.unstable_calculateColSpan({\n    rowId: id,\n    minFirstColumn: 0,\n    maxLastColumn: columns.length,\n    columns\n  });\n  columns.forEach((column, colIndex) => {\n    const colSpanInfo = api.unstable_getCellColSpanInfo(id, colIndex);\n\n    if (colSpanInfo && colSpanInfo.spannedByColSpan) {\n      return;\n    }\n\n    if (colSpanInfo && colSpanInfo.cellProps.colSpan > 1) {\n      mergedCells.push({\n        leftIndex: colIndex + 1,\n        rightIndex: colIndex + colSpanInfo.cellProps.colSpan\n      });\n    }\n\n    const cellParams = api.getCellParams(id, column.field);\n\n    switch (cellParams.colDef.type) {\n      case 'singleSelect':\n        {\n          var _formattedValue$label;\n\n          if (typeof cellParams.colDef.valueOptions === 'function') {\n            // If value option depends on the row, set specific options to the cell\n            // This dataValidation is buggy with LibreOffice and does not allow to have coma\n            const valueOptions = cellParams.colDef.valueOptions({\n              id,\n              row,\n              field: cellParams.field\n            });\n            const formattedValueOptions = getFormattedValueOptions(cellParams.colDef, valueOptions, api);\n            dataValidation[column.field] = {\n              type: 'list',\n              allowBlank: true,\n              formulae: [`\"${formattedValueOptions.map(x => x.toString().replaceAll(',', 'CHAR(44)')).join(',')}\"`]\n            };\n          } else {\n            // If value option is defined for the column, refer to another sheet\n            dataValidation[column.field] = {\n              type: 'list',\n              allowBlank: true,\n              formulae: [defaultValueOptionsFormulae[column.field]]\n            };\n          }\n\n          const formattedValue = api.getCellParams(id, column.field).formattedValue;\n\n          if (process.env.NODE_ENV !== 'production') {\n            if (String(cellParams.formattedValue) === '[object Object]') {\n              warnInvalidFormattedValue();\n            }\n          }\n\n          row[column.field] = (_formattedValue$label = formattedValue == null ? void 0 : formattedValue.label) != null ? _formattedValue$label : formattedValue;\n          break;\n        }\n\n      case 'boolean':\n      case 'number':\n        row[column.field] = api.getCellParams(id, column.field).value;\n        break;\n\n      case 'date':\n      case 'dateTime':\n        {\n          // Excel does not do any timezone conversion, so we create a date using UTC instead of local timezone\n          // Solution from: https://github.com/exceljs/exceljs/issues/486#issuecomment-432557582\n          // About Date.UTC(): https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC#exemples\n          const date = api.getCellParams(id, column.field).value; // value may be `undefined` in auto-generated grouping rows\n\n          if (!date) {\n            break;\n          }\n\n          const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds()));\n          row[column.field] = utcDate;\n          break;\n        }\n\n      case 'actions':\n        break;\n\n      default:\n        row[column.field] = api.getCellParams(id, column.field).formattedValue;\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (String(cellParams.formattedValue) === '[object Object]') {\n            warnInvalidFormattedValue();\n          }\n        }\n\n        break;\n    }\n  });\n  return {\n    row,\n    dataValidation,\n    outlineLevel,\n    mergedCells\n  };\n};\n\nconst defaultColumnsStyles = {\n  [GRID_DATE_COL_DEF.type]: {\n    numFmt: 'dd.mm.yyyy'\n  },\n  [GRID_DATETIME_COL_DEF.type]: {\n    numFmt: 'dd.mm.yyyy hh:mm'\n  }\n};\n\nconst serializeColumn = (column, columnsStyles) => {\n  const {\n    field,\n    type\n  } = column;\n  return {\n    key: field,\n    // Excel width must stay between 0 and 255 (https://support.microsoft.com/en-us/office/change-the-column-width-and-row-height-72f5e3cc-994d-43e8-ae58-9774a0905f46)\n    // From the example of column width behavior (https://docs.microsoft.com/en-US/office/troubleshoot/excel/determine-column-widths#example-of-column-width-behavior)\n    // a value of 10 corresponds to 75px. This is an approximation, because column width depends on the the font-size\n    width: Math.min(255, column.width ? column.width / 7.5 : 8.43),\n    style: _extends({}, type && (defaultColumnsStyles == null ? void 0 : defaultColumnsStyles[type]), columnsStyles == null ? void 0 : columnsStyles[field])\n  };\n};\n\nconst addColumnGroupingHeaders = (worksheet, columns, api) => {\n  const maxDepth = Math.max(...columns.map(({\n    field\n  }) => {\n    var _api$unstable_getColu, _api$unstable_getColu2;\n\n    return (_api$unstable_getColu = (_api$unstable_getColu2 = api.unstable_getColumnGroupPath(field)) == null ? void 0 : _api$unstable_getColu2.length) != null ? _api$unstable_getColu : 0;\n  }));\n\n  if (maxDepth === 0) {\n    return;\n  }\n\n  const columnGroupDetails = api.unstable_getAllGroupDetails();\n\n  for (let rowIndex = 0; rowIndex < maxDepth; rowIndex += 1) {\n    const row = columns.map(({\n      field\n    }) => {\n      const groupingPath = api.unstable_getColumnGroupPath(field);\n\n      if (groupingPath.length <= rowIndex) {\n        return {\n          groupId: null,\n          parents: groupingPath\n        };\n      }\n\n      return _extends({}, columnGroupDetails[groupingPath[rowIndex]], {\n        parents: groupingPath.slice(0, rowIndex)\n      });\n    });\n    const newRow = worksheet.addRow(row.map(group => group.groupId === null ? null : (group == null ? void 0 : group.headerName) || group.groupId)); // use `rowCount`, since worksheet can have additional rows added in `exceljsPreProcess`\n\n    const lastRowIndex = newRow.worksheet.rowCount;\n    let leftIndex = 0;\n    let rightIndex = 1;\n\n    while (rightIndex < columns.length) {\n      const {\n        groupId: leftGroupId,\n        parents: leftParents\n      } = row[leftIndex];\n      const {\n        groupId: rightGroupId,\n        parents: rightParents\n      } = row[rightIndex];\n      const areInSameGroup = leftGroupId === rightGroupId && leftParents.length === rightParents.length && leftParents.every((leftParent, index) => rightParents[index] === leftParent);\n\n      if (areInSameGroup) {\n        rightIndex += 1;\n      } else {\n        if (rightIndex - leftIndex > 1) {\n          worksheet.mergeCells(lastRowIndex, leftIndex + 1, lastRowIndex, rightIndex);\n        }\n\n        leftIndex = rightIndex;\n        rightIndex += 1;\n      }\n    }\n\n    if (rightIndex - leftIndex > 1) {\n      worksheet.mergeCells(lastRowIndex, leftIndex + 1, lastRowIndex, rightIndex);\n    }\n  }\n};\n\nexport async function buildExcel(options, api) {\n  const {\n    columns,\n    rowIds,\n    includeHeaders,\n    includeColumnGroupsHeaders,\n    valueOptionsSheetName,\n    exceljsPreProcess,\n    exceljsPostProcess,\n    columnsStyles = {}\n  } = options;\n  const excelJS = await getExcelJs();\n  const workbook = new excelJS.Workbook();\n  const worksheet = workbook.addWorksheet('Sheet1');\n  worksheet.columns = columns.map(column => serializeColumn(column, columnsStyles));\n\n  if (exceljsPreProcess) {\n    await exceljsPreProcess({\n      workbook,\n      worksheet\n    });\n  }\n\n  if (includeColumnGroupsHeaders) {\n    addColumnGroupingHeaders(worksheet, columns, api);\n  }\n\n  if (includeHeaders) {\n    worksheet.addRow(columns.map(column => column.headerName || column.field));\n  }\n\n  const columnsWithArrayValueOptions = columns.filter(column => column.type === 'singleSelect' && column.valueOptions && typeof column.valueOptions !== 'function');\n  const defaultValueOptionsFormulae = {};\n\n  if (columnsWithArrayValueOptions.length) {\n    const valueOptionsWorksheet = workbook.addWorksheet(valueOptionsSheetName);\n    valueOptionsWorksheet.columns = columnsWithArrayValueOptions.map(({\n      field\n    }) => ({\n      key: field\n    }));\n    columnsWithArrayValueOptions.forEach(column => {\n      const formattedValueOptions = getFormattedValueOptions(column, column.valueOptions, api);\n      valueOptionsWorksheet.getColumn(column.field).values = [column.headerName || column.field, ...formattedValueOptions];\n      const columnLetter = valueOptionsWorksheet.getColumn(column.field).letter;\n      defaultValueOptionsFormulae[column.field] = `${valueOptionsSheetName}!$${columnLetter}$2:$${columnLetter}$${1 + formattedValueOptions.length}`;\n    });\n  }\n\n  rowIds.forEach(id => {\n    const {\n      row,\n      dataValidation,\n      outlineLevel,\n      mergedCells\n    } = serializeRow(id, columns, api, defaultValueOptionsFormulae);\n    const newRow = worksheet.addRow(row);\n    Object.keys(dataValidation).forEach(field => {\n      newRow.getCell(field).dataValidation = _extends({}, dataValidation[field]);\n    });\n\n    if (outlineLevel) {\n      newRow.outlineLevel = outlineLevel;\n    } // use `rowCount`, since worksheet can have additional rows added in `exceljsPreProcess`\n\n\n    const lastRowIndex = newRow.worksheet.rowCount;\n    mergedCells.forEach(mergedCell => {\n      worksheet.mergeCells(lastRowIndex, mergedCell.leftIndex, lastRowIndex, mergedCell.rightIndex);\n    });\n  });\n\n  if (exceljsPostProcess) {\n    await exceljsPostProcess({\n      workbook,\n      worksheet\n    });\n  }\n\n  return workbook;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}