{"ast":null,"code":"import { gridColumnLookupSelector, gridFilteredRowsLookupSelector, gridRowIdsSelector, gridRowTreeSelector } from '@mui/x-data-grid-pro';\nimport { getAggregationRules } from './gridAggregationUtils';\nimport { gridAggregationModelSelector } from './gridAggregationSelectors';\n\nconst getAggregationCellValue = _ref => {\n  let {\n    apiRef,\n    groupId,\n    field,\n    aggregationFunction,\n    aggregationRowsScope\n  } = _ref;\n  const rowTree = gridRowTreeSelector(apiRef);\n  const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);\n  let rowIds; // TODO: Add custom root id\n\n  if (groupId === '') {\n    rowIds = gridRowIdsSelector(apiRef).filter(rowId => !rowTree[rowId].isAutoGenerated);\n  } else {\n    rowIds = apiRef.current.getRowGroupChildren({\n      groupId\n    });\n  }\n\n  const values = [];\n  rowIds.forEach(rowId => {\n    var _rowNode$children;\n\n    if (aggregationRowsScope === 'filtered' && filteredRowsLookup[rowId] === false) {\n      return;\n    } // If the row is a group, we want to aggregate based on its children\n    // For instance in the following tree, we want the aggregated values of A to be based on A.A, A.B.A and A.B.B but not A.B\n    // A\n    //   A.A\n    //   A.B\n    //     A.B.A\n    //     A.B.B\n\n\n    const rowNode = apiRef.current.getRowNode(rowId);\n\n    if ((_rowNode$children = rowNode.children) != null && _rowNode$children.length) {\n      return;\n    }\n\n    values.push(apiRef.current.getCellValue(rowId, field));\n  });\n  return aggregationFunction.apply({\n    values\n  });\n};\n\nconst getGroupAggregatedValue = _ref2 => {\n  let {\n    groupId,\n    apiRef,\n    aggregationRowsScope,\n    aggregatedFields,\n    aggregationRules,\n    position\n  } = _ref2;\n  const groupAggregationLookup = {};\n\n  for (let j = 0; j < aggregatedFields.length; j += 1) {\n    const aggregatedField = aggregatedFields[j];\n    const columnAggregationRules = aggregationRules[aggregatedField];\n    groupAggregationLookup[aggregatedField] = {\n      position,\n      value: getAggregationCellValue({\n        apiRef,\n        groupId,\n        field: aggregatedField,\n        aggregationFunction: columnAggregationRules.aggregationFunction,\n        aggregationRowsScope\n      })\n    };\n  }\n\n  return groupAggregationLookup;\n};\n\nexport const createAggregationLookup = _ref3 => {\n  let {\n    apiRef,\n    aggregationFunctions,\n    aggregationRowsScope,\n    getAggregationPosition\n  } = _ref3;\n  const aggregationRules = getAggregationRules({\n    columnsLookup: gridColumnLookupSelector(apiRef),\n    aggregationModel: gridAggregationModelSelector(apiRef),\n    aggregationFunctions\n  });\n  const aggregatedFields = Object.keys(aggregationRules);\n\n  if (aggregatedFields.length === 0) {\n    return {};\n  }\n\n  const aggregationLookup = {};\n  const rowIds = gridRowIdsSelector(apiRef);\n  const rowTree = gridRowTreeSelector(apiRef);\n\n  for (let i = 0; i < rowIds.length; i += 1) {\n    var _node$children;\n\n    const rowId = rowIds[i];\n    const node = rowTree[rowId];\n    const hasChildren = (_node$children = node.children) == null ? void 0 : _node$children.some(childId => {\n      var _rowTree$childId$posi;\n\n      return ((_rowTree$childId$posi = rowTree[childId].position) != null ? _rowTree$childId$posi : 'body') === 'body';\n    });\n\n    if (hasChildren) {\n      const position = getAggregationPosition(node);\n\n      if (position != null) {\n        aggregationLookup[rowId] = getGroupAggregatedValue({\n          groupId: rowId,\n          apiRef,\n          aggregatedFields,\n          aggregationRowsScope,\n          aggregationRules,\n          position\n        });\n      }\n    }\n  } // TODO: Add custom root id\n\n\n  const position = getAggregationPosition(null);\n\n  if (position != null) {\n    aggregationLookup[''] = getGroupAggregatedValue({\n      groupId: '',\n      apiRef,\n      aggregatedFields,\n      aggregationRowsScope,\n      aggregationRules,\n      position\n    });\n  }\n\n  return aggregationLookup;\n};","map":null,"metadata":{},"sourceType":"module"}