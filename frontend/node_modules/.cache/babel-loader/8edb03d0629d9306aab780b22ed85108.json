{"ast":null,"code":"import * as React from 'react';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport Box from '@mui/material/Box';\nimport { styled } from '@mui/material/styles';\nimport { getDataGridUtilityClass, gridClasses, GridColumnHeaderTitle, gridDensityHeaderHeightSelector, useGridSelector } from '@mui/x-data-grid';\nimport { getAggregationFunctionLabel } from '../hooks/features/aggregation/gridAggregationUtils';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst GridAggregationHeaderRoot = styled(Box, {\n  name: 'MuiDataGrid',\n  slot: 'AggregationColumnHeader',\n  overridesResolver: (_, styles) => styles.aggregationColumnHeader\n})({\n  display: 'flex',\n  flexDirection: 'column',\n  [`&.${gridClasses['aggregationColumnHeader--alignRight']}`]: {\n    alignItems: 'flex-end'\n  },\n  [`&.${gridClasses['aggregationColumnHeader--alignCenter']}`]: {\n    alignItems: 'center'\n  }\n});\nconst GridAggregationFunctionLabel = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'AggregationColumnHeaderLabel',\n  overridesResolver: (_, styles) => styles.aggregationColumnHeaderLabel\n})(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    fontSize: theme.typography.caption.fontSize,\n    lineHeight: theme.typography.caption.fontSize,\n    marginTop: `calc(-2px - ${theme.typography.caption.fontSize})`,\n    fontWeight: theme.typography.fontWeightMedium,\n    color: theme.palette.primary.dark,\n    textTransform: 'uppercase'\n  };\n});\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    colDef\n  } = ownerState;\n  const slots = {\n    root: ['aggregationColumnHeader', colDef.headerAlign === 'left' && 'aggregationColumnHeader--alignLeft', colDef.headerAlign === 'center' && 'aggregationColumnHeader--alignCenter', colDef.headerAlign === 'right' && 'aggregationColumnHeader--alignRight'],\n    aggregationLabel: ['aggregationColumnHeaderLabel']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nconst GridAggregationHeader = props => {\n  var _colDef$headerName;\n\n  const {\n    colDef,\n    aggregation\n  } = props;\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const headerHeight = useGridSelector(apiRef, gridDensityHeaderHeightSelector);\n  const ownerState = {\n    classes: rootProps.classes,\n    headerHeight,\n    colDef\n  };\n  const classes = useUtilityClasses(ownerState);\n\n  if (!aggregation) {\n    return null;\n  }\n\n  const aggregationLabel = getAggregationFunctionLabel({\n    apiRef,\n    aggregationRule: aggregation.aggregationRule\n  });\n  return /*#__PURE__*/_jsxs(GridAggregationHeaderRoot, {\n    ownerState: ownerState,\n    className: classes.root,\n    children: [/*#__PURE__*/_jsx(GridColumnHeaderTitle, {\n      label: (_colDef$headerName = colDef.headerName) != null ? _colDef$headerName : colDef.field,\n      description: colDef.description,\n      columnWidth: colDef.computedWidth\n    }), /*#__PURE__*/_jsx(GridAggregationFunctionLabel, {\n      ownerState: ownerState,\n      className: classes.aggregationLabel,\n      children: aggregationLabel\n    })]\n  });\n};\n\nexport { GridAggregationHeader };","map":null,"metadata":{},"sourceType":"module"}