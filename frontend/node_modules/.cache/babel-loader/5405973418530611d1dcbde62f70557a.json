{"ast":null,"code":"export const currencyPairs = ['USDGBP', 'USDEUR', 'GBPEUR', 'JPYUSD', 'MXNUSD', 'BTCUSD', 'USDCAD', 'EURJPY', 'EURUSD', 'EURCHF', 'USDCHF', 'EURGBP', 'GBPUSD', 'AUDCAD', 'NZDUSD', 'GBPCHF', 'AUDUSD', 'GBPJPY', 'USDJPY', 'CHFJPY', 'EURCAD', 'AUDJPY', 'EURAUD', 'AUDNZD', 'CADEUR', 'CHFMXN', 'ETHUSD', 'BCHUSD', 'ETHBTC', 'XRPUSD', 'XRPBTC', 'USDLTC', 'USDXRP', 'USDDSH', 'USDBCH', 'JPYEUR', 'JPYUSD', 'JPYGBP', 'JPYCAD', 'JPYCHF', 'JPYAUD', 'JPYNZD', 'JPYSGD', 'JPYNOK', 'JPYRUB', 'JPYSEK', 'JPYTRY', 'JPYZAR', 'JPYHKD', 'JPYCNH', 'JPYDKK', 'JPYMXN', 'JPYPLN', 'JPYXAG', 'JPYXAU', 'JPYBTC', 'JPYETH', 'JPYLTC', 'JPYXRP', 'JPYDSH', 'JPYBCH', 'GBPEUR', 'GBPRUB', 'GBPTRY'];\nexport const getBasicGridData = (rowLength, colLength) => {\n  const data = [];\n  const pricesColLength = colLength - 2;\n\n  for (let i = 0; i < rowLength; i += 1) {\n    const idx = i >= currencyPairs.length ? i % currencyPairs.length : i;\n    const model = {\n      id: i,\n      currencyPair: currencyPairs[idx]\n    };\n\n    for (let j = 1; j <= pricesColLength; j += 1) {\n      model[`price${j}M`] = Number(`${i.toString()}${j}`); // randomPrice(0.7, 2);\n    }\n\n    data.push(model);\n  }\n\n  const columns = [{\n    field: 'id',\n    headerName: 'id',\n    type: 'number'\n  }, {\n    field: 'currencyPair',\n    headerName: 'Currency Pair'\n  }];\n\n  for (let j = 1; j <= pricesColLength; j += 1) {\n    // const y = Math.floor(j / 12);\n    columns.push({\n      field: `price${j}M`,\n      headerName: `${j}M`,\n      type: 'number'\n    }); // (y > 0 ? `${y}Y` : '') + `${j - y * 12}M`\n  }\n\n  columns.length = colLength; // we cut the array in case < 2;\n\n  return {\n    columns,\n    rows: data\n  };\n};","map":null,"metadata":{},"sourceType":"module"}