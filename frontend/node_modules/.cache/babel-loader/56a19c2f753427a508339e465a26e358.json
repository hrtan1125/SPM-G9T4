{"ast":null,"code":"import globalChance from 'chance';\nimport { COLORS, COMMODITY_OPTIONS, CONTRACT_TYPE_OPTIONS, COUNTRY_ISO_OPTIONS, CURRENCY_OPTIONS, INCOTERM_OPTIONS, RATE_TYPE_OPTIONS, STATUS_OPTIONS, TAXCODE_OPTIONS } from './static-data';\nconst chanceId = globalChance();\nlet chance;\n\nif (typeof DISABLE_CHANCE_RANDOM !== 'undefined' && DISABLE_CHANCE_RANDOM) {\n  chance = globalChance(() => 0.5);\n} else {\n  chance = chanceId;\n}\n/**\n * Wrap a data generator that returns a string and add a prefix if the value generated has already been given\n */\n\n\nconst uniquenessHandler = generator => (data, context) => {\n  var _context$values$rawVa;\n\n  const rawValue = generator(data, context);\n\n  if (!context.values) {\n    return rawValue;\n  }\n\n  const valueCount = ((_context$values$rawVa = context.values[rawValue]) != null ? _context$values$rawVa : 0) + 1;\n  context.values[rawValue] = valueCount + 1;\n\n  if (valueCount > 1) {\n    return `${rawValue} ${valueCount}`;\n  }\n\n  return rawValue;\n};\n\nfunction dateFuture(years, refDate) {\n  let date = new Date();\n\n  if (typeof refDate !== 'undefined') {\n    date = new Date(Date.parse(refDate));\n  }\n\n  const range = {\n    min: 1000,\n    max: (years || 1) * 365 * 24 * 3600 * 1000\n  }; // some time from now to N years later, in milliseconds\n\n  const past = date.getTime() + chance.integer(range);\n  date.setTime(past);\n  return date;\n}\n\nfunction dateRecent(days, refDate) {\n  let date = new Date();\n\n  if (typeof refDate !== 'undefined') {\n    date = new Date(Date.parse(refDate));\n  }\n\n  const range = {\n    min: 1000,\n    max: (days || 1) * 24 * 3600 * 1000\n  }; // some time from now to N days ago, in milliseconds\n\n  const past = date.getTime() - chance.integer(range);\n  date.setTime(past);\n  return date;\n}\n\nfunction datePast(years, refDate) {\n  let date = new Date();\n\n  if (typeof refDate !== 'undefined') {\n    date = new Date(Date.parse(refDate));\n  }\n\n  const range = {\n    min: 1000,\n    max: (years || 1) * 365 * 24 * 3600 * 1000\n  }; // some time from now to N years ago, in milliseconds\n\n  const past = date.getTime() - chance.integer(range);\n  date.setTime(past);\n  return date;\n}\n\nexport const random = (min, max) => chance.floating({\n  min,\n  max\n});\nexport const randomInt = (min, max) => Math.floor(random(0, 1) * (max - min + 1) + min);\nexport const randomPrice = function () {\n  let min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100000;\n  return Number(random(min, max).toFixed(2));\n};\nexport const randomRate = () => random(0, 1);\nexport const randomDate = (start, end) => new Date(start.getTime() + chance.floating({\n  min: 0,\n  max: 1\n}) * (end.getTime() - start.getTime()));\nexport const randomArrayItem = arr => arr[randomInt(0, arr.length - 1)];\nexport const randomBoolean = () => randomArrayItem([true, false]);\nexport const randomColor = () => randomArrayItem(COLORS);\nexport const randomId = () => chanceId.guid();\nexport const randomDesk = () => `D-${chance.integer({\n  min: 0,\n  max: 10000\n})}`;\nexport const randomCommodity = () => randomArrayItem(COMMODITY_OPTIONS);\nexport const randomTraderName = () => chance.name();\nexport const randomUserName = () => chance.twitter();\nexport const randomEmail = () => chance.email();\nexport const randomUrl = () => chance.url();\nexport const randomPhoneNumber = () => chance.phone();\nexport const randomUnitPrice = () => randomPrice(1, 100);\nexport const randomUnitPriceCurrency = () => randomArrayItem(CURRENCY_OPTIONS);\nexport const randomQuantity = () => randomInt(1000, 100000);\nexport const randomFeeRate = () => Number(random(0.1, 0.4).toFixed(3));\nexport const randomIncoterm = () => randomArrayItem(INCOTERM_OPTIONS);\nexport const randomStatusOptions = () => randomArrayItem(STATUS_OPTIONS);\nexport const randomPnL = () => random(-100000000, 100000000);\nexport const randomMaturityDate = () => dateFuture();\nexport const randomTradeDate = () => dateRecent();\nexport const randomBrokerId = () => chance.guid();\nexport const randomCompanyName = () => chance.company();\nexport const randomCountry = () => randomArrayItem(COUNTRY_ISO_OPTIONS);\nexport const randomCurrency = () => randomArrayItem(CURRENCY_OPTIONS);\nexport const randomAddress = () => chance.address();\nexport const randomCity = () => chance.city();\nexport const randomTaxCode = () => randomArrayItem(TAXCODE_OPTIONS);\nexport const randomContractType = () => randomArrayItem(CONTRACT_TYPE_OPTIONS);\nexport const randomRateType = () => randomArrayItem(RATE_TYPE_OPTIONS);\nexport const randomCreatedDate = () => datePast();\nexport const randomUpdatedDate = () => dateRecent();\nexport const randomJobTitle = () => chance.profession();\nexport const randomRating = () => randomInt(1, 5);\nexport const randomName = uniquenessHandler(() => chance.name());\nexport const generateFilledQuantity = data => Number((data.quantity * randomRate()).toFixed()) / data.quantity;\nexport const generateIsFilled = data => data.quantity === data.filledQuantity;","map":null,"metadata":{},"sourceType":"module"}