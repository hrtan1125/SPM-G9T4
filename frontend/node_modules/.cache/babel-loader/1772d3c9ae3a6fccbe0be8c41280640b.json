{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"style\", \"className\", \"innerRef\"];\nimport * as React from 'react';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { styled, alpha } from '@mui/material/styles';\nimport { useEventCallback } from '@mui/material/utils';\nimport { getDataGridUtilityClass, gridClasses, useGridSelector, useGridApiEventHandler, gridVisibleColumnFieldsSelector, GridColumnHeaderSeparatorSides } from '@mui/x-data-grid';\nimport { GridColumnHeaders, GridColumnHeadersInner, useGridColumnHeaders } from '@mui/x-data-grid/internals';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { gridPinnedColumnsSelector, GridPinnedPosition } from '../hooks/features/columnPinning';\nimport { filterColumns } from './DataGridProVirtualScroller';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    leftPinnedColumns,\n    rightPinnedColumns,\n    classes\n  } = ownerState;\n  const slots = {\n    leftPinnedColumns: ['pinnedColumnHeaders', leftPinnedColumns && leftPinnedColumns.length > 0 && `pinnedColumnHeaders--left`],\n    rightPinnedColumns: ['pinnedColumnHeaders', rightPinnedColumns && rightPinnedColumns.length > 0 && `pinnedColumnHeaders--right`]\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n}; // Inspired by https://github.com/material-components/material-components-ios/blob/bca36107405594d5b7b16265a5b0ed698f85a5ee/components/Elevation/src/UIColor%2BMaterialElevation.m#L61\n\n\nconst getOverlayAlpha = elevation => {\n  let alphaValue;\n\n  if (elevation < 1) {\n    alphaValue = 5.11916 * elevation ** 2;\n  } else {\n    alphaValue = 4.5 * Math.log(elevation + 1) + 2;\n  }\n\n  return alphaValue / 100;\n};\n\nconst GridColumnHeadersPinnedColumnHeaders = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'PinnedColumnHeaders',\n  overridesResolver: (props, styles) => [{\n    [`&.${gridClasses['pinnedColumnHeaders--left']}`]: styles['pinnedColumnHeaders--left']\n  }, {\n    [`&.${gridClasses['pinnedColumnHeaders--right']}`]: styles['pinnedColumnHeaders--right']\n  }, styles.pinnedColumnHeaders]\n})(_ref => {\n  let {\n    theme,\n    ownerState\n  } = _ref;\n  return _extends({\n    position: 'absolute',\n    overflow: 'hidden',\n    height: '100%',\n    zIndex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    boxShadow: theme.shadows[2],\n    backgroundColor: theme.palette.background.default\n  }, theme.palette.mode === 'dark' && {\n    backgroundImage: `linear-gradient(${alpha('#fff', getOverlayAlpha(2))}, ${alpha('#fff', getOverlayAlpha(2))})`\n  }, ownerState.side === GridPinnedPosition.left && {\n    left: 0\n  }, ownerState.side === GridPinnedPosition.right && {\n    right: 0\n  });\n});\nexport const DataGridProColumnHeaders = /*#__PURE__*/React.forwardRef(function DataGridProColumnHeaders(props, ref) {\n  const {\n    className,\n    innerRef\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const rootProps = useGridRootProps();\n  const apiRef = useGridApiContext();\n  const visibleColumnFields = useGridSelector(apiRef, gridVisibleColumnFieldsSelector);\n  const [scrollbarSize, setScrollbarSize] = React.useState(0);\n  const handleContentSizeChange = useEventCallback(() => {\n    const rootDimensions = apiRef.current.getRootDimensions();\n\n    if (!rootDimensions) {\n      return;\n    }\n\n    const newScrollbarSize = rootDimensions.hasScrollY ? rootDimensions.scrollBarSize : 0;\n\n    if (scrollbarSize !== newScrollbarSize) {\n      setScrollbarSize(newScrollbarSize);\n    }\n  });\n  useGridApiEventHandler(apiRef, 'virtualScrollerContentSizeChange', handleContentSizeChange);\n  const pinnedColumns = useGridSelector(apiRef, gridPinnedColumnsSelector);\n  const [leftPinnedColumns, rightPinnedColumns] = filterColumns(pinnedColumns, visibleColumnFields);\n  const {\n    isDragging,\n    renderContext,\n    getRootProps,\n    getInnerProps,\n    getColumnHeaders,\n    getColumnGroupHeaders\n  } = useGridColumnHeaders({\n    innerRef,\n    minColumnIndex: leftPinnedColumns.length\n  });\n  const ownerState = {\n    leftPinnedColumns,\n    rightPinnedColumns,\n    classes: rootProps.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const leftRenderContext = renderContext && leftPinnedColumns.length ? _extends({}, renderContext, {\n    firstColumnIndex: 0,\n    lastColumnIndex: leftPinnedColumns.length\n  }) : null;\n  const rightRenderContext = renderContext && rightPinnedColumns.length ? _extends({}, renderContext, {\n    firstColumnIndex: visibleColumnFields.length - rightPinnedColumns.length,\n    lastColumnIndex: visibleColumnFields.length\n  }) : null;\n  const innerProps = getInnerProps();\n  const pinnedColumnHeadersProps = {\n    role: innerProps.role\n  };\n  return /*#__PURE__*/_jsxs(GridColumnHeaders, _extends({\n    ref: ref,\n    className: className\n  }, getRootProps(other), {\n    children: [leftRenderContext && /*#__PURE__*/_jsxs(GridColumnHeadersPinnedColumnHeaders, _extends({\n      className: classes.leftPinnedColumns,\n      ownerState: {\n        side: GridPinnedPosition.left\n      }\n    }, pinnedColumnHeadersProps, {\n      children: [getColumnGroupHeaders({\n        renderContext: leftRenderContext,\n        minFirstColumn: leftRenderContext.firstColumnIndex,\n        maxLastColumn: leftRenderContext.lastColumnIndex\n      }), getColumnHeaders({\n        renderContext: leftRenderContext,\n        minFirstColumn: leftRenderContext.firstColumnIndex,\n        maxLastColumn: leftRenderContext.lastColumnIndex\n      }, {\n        disableReorder: true\n      })]\n    })), /*#__PURE__*/_jsxs(GridColumnHeadersInner, _extends({\n      isDragging: isDragging\n    }, innerProps, {\n      children: [getColumnGroupHeaders({\n        renderContext,\n        minFirstColumn: leftPinnedColumns.length,\n        maxLastColumn: visibleColumnFields.length - rightPinnedColumns.length\n      }), getColumnHeaders({\n        renderContext,\n        minFirstColumn: leftPinnedColumns.length,\n        maxLastColumn: visibleColumnFields.length - rightPinnedColumns.length\n      })]\n    })), rightRenderContext && /*#__PURE__*/_jsxs(GridColumnHeadersPinnedColumnHeaders, _extends({\n      ownerState: {\n        side: GridPinnedPosition.right\n      },\n      className: classes.rightPinnedColumns,\n      style: {\n        paddingRight: scrollbarSize\n      }\n    }, pinnedColumnHeadersProps, {\n      children: [getColumnGroupHeaders({\n        renderContext: rightRenderContext,\n        minFirstColumn: rightRenderContext.firstColumnIndex,\n        maxLastColumn: rightRenderContext.lastColumnIndex\n      }), getColumnHeaders({\n        renderContext: rightRenderContext,\n        minFirstColumn: rightRenderContext.firstColumnIndex,\n        maxLastColumn: rightRenderContext.lastColumnIndex\n      }, {\n        disableReorder: true,\n        separatorSide: GridColumnHeaderSeparatorSides.Left\n      })]\n    }))]\n  }));\n});","map":null,"metadata":{},"sourceType":"module"}