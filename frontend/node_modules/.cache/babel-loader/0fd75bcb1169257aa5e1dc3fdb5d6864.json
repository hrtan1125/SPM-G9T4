{"ast":null,"code":"import * as React from 'react';\nimport { useGridApiMethod, useGridLogger } from '@mui/x-data-grid';\nimport { useGridRegisterPipeProcessor, exportAs, getColumnsToExport, defaultGetRowsToExport } from '@mui/x-data-grid/internals';\nimport { buildExcel } from './serializer/excelSerializer';\nimport { GridExcelExportMenuItem } from '../../../components';\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridSelection (state)\n * @requires useGridParamsApi (method)\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const useGridExcelExport = apiRef => {\n  const logger = useGridLogger(apiRef, 'useGridExcelExport');\n  const getDataAsExcel = React.useCallback(function () {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var _options$getRowsToExp, _options$includeHeade, _options$includeColum;\n\n    logger.debug(`Get data as excel`);\n    const getRowsToExport = (_options$getRowsToExp = options.getRowsToExport) != null ? _options$getRowsToExp : defaultGetRowsToExport;\n    const exportedRowIds = getRowsToExport({\n      apiRef\n    });\n    const exportedColumns = getColumnsToExport({\n      apiRef,\n      options\n    });\n    return buildExcel({\n      columns: exportedColumns,\n      rowIds: exportedRowIds,\n      includeHeaders: (_options$includeHeade = options.includeHeaders) != null ? _options$includeHeade : true,\n      includeColumnGroupsHeaders: (_options$includeColum = options.includeColumnGroupsHeaders) != null ? _options$includeColum : true,\n      valueOptionsSheetName: (options == null ? void 0 : options.valueOptionsSheetName) || 'Options',\n      columnsStyles: options == null ? void 0 : options.columnsStyles,\n      exceljsPreProcess: options == null ? void 0 : options.exceljsPreProcess,\n      exceljsPostProcess: options == null ? void 0 : options.exceljsPostProcess\n    }, apiRef.current);\n  }, [logger, apiRef]);\n  const exportDataAsExcel = React.useCallback(async options => {\n    logger.debug(`Export data as excel`);\n    const workbook = await getDataAsExcel(options);\n\n    if (workbook === null) {\n      return;\n    }\n\n    const content = await workbook.xlsx.writeBuffer();\n    const blob = new Blob([content], {\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    });\n    exportAs(blob, 'xlsx', options == null ? void 0 : options.fileName);\n  }, [logger, getDataAsExcel]);\n  const excelExportApi = {\n    getDataAsExcel,\n    exportDataAsExcel\n  };\n  useGridApiMethod(apiRef, excelExportApi, 'GridExcelExportApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    var _options$excelOptions;\n\n    if ((_options$excelOptions = options.excelOptions) != null && _options$excelOptions.disableToolbarButton) {\n      return initialValue;\n    }\n\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridExcelExportMenuItem, {\n        options: options.excelOptions\n      }),\n      componentName: 'excelExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n};","map":{"version":3,"names":["React","useGridApiMethod","useGridLogger","useGridRegisterPipeProcessor","exportAs","getColumnsToExport","defaultGetRowsToExport","buildExcel","GridExcelExportMenuItem","jsx","_jsx","useGridExcelExport","apiRef","logger","getDataAsExcel","useCallback","options","_options$getRowsToExp","_options$includeHeade","_options$includeColum","debug","getRowsToExport","exportedRowIds","exportedColumns","columns","rowIds","includeHeaders","includeColumnGroupsHeaders","valueOptionsSheetName","columnsStyles","exceljsPreProcess","exceljsPostProcess","current","exportDataAsExcel","workbook","content","xlsx","writeBuffer","blob","Blob","type","fileName","excelExportApi","addExportMenuButtons","initialValue","_options$excelOptions","excelOptions","disableToolbarButton","component","componentName"],"sources":["C:/Users/Brian/Documents/GitHub/SPM-G9T4/frontend/node_modules/@mui/x-data-grid-premium/hooks/features/export/useGridExcelExport.js"],"sourcesContent":["import * as React from 'react';\nimport { useGridApiMethod, useGridLogger } from '@mui/x-data-grid';\nimport { useGridRegisterPipeProcessor, exportAs, getColumnsToExport, defaultGetRowsToExport } from '@mui/x-data-grid/internals';\nimport { buildExcel } from './serializer/excelSerializer';\nimport { GridExcelExportMenuItem } from '../../../components';\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridSelection (state)\n * @requires useGridParamsApi (method)\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const useGridExcelExport = apiRef => {\n  const logger = useGridLogger(apiRef, 'useGridExcelExport');\n  const getDataAsExcel = React.useCallback((options = {}) => {\n    var _options$getRowsToExp, _options$includeHeade, _options$includeColum;\n\n    logger.debug(`Get data as excel`);\n    const getRowsToExport = (_options$getRowsToExp = options.getRowsToExport) != null ? _options$getRowsToExp : defaultGetRowsToExport;\n    const exportedRowIds = getRowsToExport({\n      apiRef\n    });\n    const exportedColumns = getColumnsToExport({\n      apiRef,\n      options\n    });\n    return buildExcel({\n      columns: exportedColumns,\n      rowIds: exportedRowIds,\n      includeHeaders: (_options$includeHeade = options.includeHeaders) != null ? _options$includeHeade : true,\n      includeColumnGroupsHeaders: (_options$includeColum = options.includeColumnGroupsHeaders) != null ? _options$includeColum : true,\n      valueOptionsSheetName: (options == null ? void 0 : options.valueOptionsSheetName) || 'Options',\n      columnsStyles: options == null ? void 0 : options.columnsStyles,\n      exceljsPreProcess: options == null ? void 0 : options.exceljsPreProcess,\n      exceljsPostProcess: options == null ? void 0 : options.exceljsPostProcess\n    }, apiRef.current);\n  }, [logger, apiRef]);\n  const exportDataAsExcel = React.useCallback(async options => {\n    logger.debug(`Export data as excel`);\n    const workbook = await getDataAsExcel(options);\n\n    if (workbook === null) {\n      return;\n    }\n\n    const content = await workbook.xlsx.writeBuffer();\n    const blob = new Blob([content], {\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    });\n    exportAs(blob, 'xlsx', options == null ? void 0 : options.fileName);\n  }, [logger, getDataAsExcel]);\n  const excelExportApi = {\n    getDataAsExcel,\n    exportDataAsExcel\n  };\n  useGridApiMethod(apiRef, excelExportApi, 'GridExcelExportApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    var _options$excelOptions;\n\n    if ((_options$excelOptions = options.excelOptions) != null && _options$excelOptions.disableToolbarButton) {\n      return initialValue;\n    }\n\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridExcelExportMenuItem, {\n        options: options.excelOptions\n      }),\n      componentName: 'excelExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}